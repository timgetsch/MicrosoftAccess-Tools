'--------------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by the a tool.
'     Runtime Version:<TOOL_VERSION>
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'--------------------------------------------------------------------------------------
'          __    _____   ______       ___       _____ ____    __
'         / /   /  _/ | / / __ \     |__ \     / ___// __ \  / /
'        / /    / //  |/ / / / /     __/ /     \__ \/ / / / / /
'       / /____/ // /|  / /_/ /     / __/     ___/ / /_/ / / /___
' _____/_____/___/_/ |_/\___\_\____/____/____/____/\___\_\/_____/
'/_____/                     /_____/   /_____/
'
' (c) Tim Getsch - <SOURCE_URL>
' @author timgetsch@commitcs.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'--------------------------------------------------------------------------------------

'--------------------------------------------------------------------------------------
' NewQ v0.2.1
' (c) Tim Getsch
'
' NewQ makes it easy to create new instances of nullable types based on their
' non-nullable counterparts.
'
' @class NewQ
' @author timgetsch@commitcs.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'---------------------------------------------------------------------------------------
Option Compare Database
Option Explicit

Public Function BooleanQ(Value As Boolean) As BooleanQ
    Dim v As New BooleanQ
    v = Value
    Set BooleanQ = v
End Function

Public Function ByteQ(Value As Byte) As ByteQ
    Dim v As New ByteQ
    v = Value
    Set ByteQ = v
End Function

Public Function CurrencyQ(Value As Currency) As CurrencyQ
    Dim v As New CurrencyQ
    v = Value
    Set CurrencyQ = v
End Function

Public Function DateQ(Value As Date) As DateQ
    Dim v As New DateQ
    v = Value
    Set DateQ = v
End Function

Public Function DoubleQ(Value As Double) As DoubleQ
    Dim v As New DoubleQ
    v = Value
    Set DoubleQ = v
End Function

Public Function IntegerQ(Value As Integer) As IntegerQ
    Dim v As New IntegerQ
    v = Value
    Set IntegerQ = v
End Function

Public Function LongQ(Value As Long) As LongQ
    Dim v As New LongQ
    v = Value
    Set LongQ = v
End Function

Public Function SingleQ(Value As Single) As SingleQ
    Dim v As New SingleQ
    v = Value
    Set SingleQ = v
End Function

Public Function StringQ(Value As String) As StringQ
    Dim v As New StringQ
    v = Value
    Set StringQ = v
End Function

Public Function VariantQ(Value As Variant) As VariantQ
    Dim v As New VariantQ
    v = Value
    Set VariantQ = v
End Function
