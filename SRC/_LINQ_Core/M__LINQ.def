'---------------------------------------------------------------------------------------
'          __    _____   ______       ___       _____ ____    __
'         / /   /  _/ | / / __ \     |__ \     / ___// __ \  / /
'        / /    / //  |/ / / / /     __/ /     \__ \/ / / / / /
'       / /____/ // /|  / /_/ /     / __/     ___/ / /_/ / / /___
' _____/_____/___/_/ |_/\___\_\____/____/____/____/\___\_\/_____/
'/_____/                     /_____/   /_____/
'
' (c) Tim Getsch
' @author timgetsch@commitcs.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'---------------------------------------------------------------------------------------
Option Compare Database
Option Explicit

Public Const TOOL_VERSION As String = "0.4.2"

Public Const DBC_CLASS_NAME As String = "cls_LINQ_2_SQL__Databases"
Public Const LINQ_SOURCE_URL As String = "https://github.com/timgetsch/MicrosoftAccess-Tools/tree/master/_LINQ_2_SQL_AddIn"
Public Const LINQ_REMOTE_CONNECTIONS As String = "USys_LinqRemoteConnections"
Private Const LINQ_TEMPLATES_LIBRARY As String = "_LINQ_Templates"
Private Const LINQ_NULLABLE_DATA_TYPES_LIBRARY As String = "NullableDataTypes"
Private Const LINQ_TEMPLATE_LIBRARIES_TABLE As String = "TemplateLibraries"
Private Const LINQ_ENUM_TEMPLATE As String = "cn_TEMPLATE"
Public Const LINQ_SHARED_MODULE As String = "mod_LINQ_2_SQL_Shared"
Public Const LINQ_SQL_GENERATOR As String = "mod_LINQ_2_SQL_Generator"

Public Function ImportTemlateLibrarySourceFiles() As Boolean
10        On Error GoTo PROC_ERROR
          
          Dim rsTemplateLibraries As DAO.Recordset2
20        Set rsTemplateLibraries = CurrentDb.OpenRecordset(LINQ_TEMPLATE_LIBRARIES_TABLE)
          
30        While Not rsTemplateLibraries.EOF
              Dim strSourceLibraryDatabase As String
40            strSourceLibraryDatabase = gFSO.BuildPath(CurrentProject.Path, rsTemplateLibraries!LibraryName & ".accdb")
              
              Dim acc As New Access.Application
50            acc.OpenCurrentDatabase strSourceLibraryDatabase
              
              Dim rsModules As DAO.Recordset2
60            Set rsModules = rsTemplateLibraries.Fields("Modules").Value
              
70            rsTemplateLibraries.Edit
              
80            While Not rsModules.EOF
90                rsModules.Edit
                  
100               If Left(rsModules!FileName, 2) = "M_" Then
110                   rsModules!FileName = Mid(rsModules!FileName, 3)
120               End If
                  
                  Dim strModule As String
130               strModule = rsModules!FileName
                  
                  Dim strTempFile As String
140               strTempFile = gFSO.BuildPath(gFSO.GetSpecialFolder(TemporaryFolder), strModule)
                  
150               If gFSO.FileExists(strTempFile) Then gFSO.DeleteFile strTempFile
                  
160               acc.SaveAsText acModule, gFSO.GetBaseName(strModule), strTempFile
                              
                  Dim fldFileData As DAO.Field2
170               Set fldFileData = rsModules.Fields("FileData")
180               fldFileData.LoadFromFile strTempFile
                  
190               gFSO.DeleteFile strTempFile
                  
200               rsModules.Update
210               rsModules.MoveNext
220           Wend
              
230           acc.CloseCurrentDatabase
              
240           rsTemplateLibraries.Update
250           rsTemplateLibraries.MoveNext
260       Wend
          
270       If Not acc Is Nothing Then acc.Quit
          
280       ImportTemlateLibrarySourceFiles = True
          
PROC_EXIT:
290       Exit Function

PROC_ERROR:
300       LogError "_LINQ", "ImportTemlateLibrarySourceFiles", Erl, Err.Number, Err.Description
310       Resume PROC_EXIT
320       Resume
End Function

Public Function GetCodeClassPropertyName(CodeClassName As String) As String
10        On Error GoTo PROC_ERROR
          
20        GetCodeClassPropertyName = GetCodeName(CodeClassName) & "DB"

PROC_EXIT:
30        Exit Function

PROC_ERROR:
40        LogError "_LINQ", "GetCodeClassPropertyName", Erl, Err.Number, Err.Description
50        Resume PROC_EXIT
60        Resume
End Function

Public Function GetCodeClassEnum(CodeClassName As String) As String
10        On Error GoTo PROC_ERROR
          
20        GetCodeClassEnum = "lc_" & GetCodeName(CodeClassName)

PROC_EXIT:
30        Exit Function

PROC_ERROR:
40        LogError "_LINQ", "GetCodeClassEnum", Erl, Err.Number, Err.Description
50        Resume PROC_EXIT
60        Resume
End Function

Public Function GetCodeName(CodeClassName As String) As String
10        On Error GoTo PROC_ERROR

          Dim strCodeName As String
20        strCodeName = CodeClassName
30        If strCodeName Like "dbc*" Then strCodeName = Mid(strCodeName, 4)
40        If strCodeName Like "cls*" Then strCodeName = Mid(strCodeName, 4)
50        If strCodeName Like "_LINQ_*" Then strCodeName = Mid(strCodeName, 7)
60        If strCodeName Like "2_SQL_*" Then strCodeName = Mid(strCodeName, 7)
70        GetCodeName = strCodeName

PROC_EXIT:
80        Exit Function

PROC_ERROR:
90        LogError "_LINQ", "GetCodeName", Erl, Err.Number, Err.Description
100       Resume PROC_EXIT
110       Resume
End Function

Public Function AutoUpdateSupportingClasses() As Boolean
          Dim fFailed As Boolean
          
10        On Error GoTo PROC_ERROR

20        If Not AutoUpdateClassIfNecessary(LINQ_SHARED_MODULE, LINQ_TEMPLATES_LIBRARY) Then fFailed = True
30        If Not AutoUpdateClassIfNecessary(LINQ_SQL_GENERATOR, LINQ_TEMPLATES_LIBRARY) Then fFailed = True
40        If Not AutoUpdateClassIfNecessary("cls_LINQ_2_SQL__StringBuilder", LINQ_TEMPLATES_LIBRARY) Then fFailed = True
50        If Not AutoUpdateClassIfNecessary("cls_LINQ_2_SQL__TableValuedParameter", LINQ_TEMPLATES_LIBRARY) Then fFailed = True
60        If Not AutoUpdateClassIfNecessary("cls_LINQ_2_SQL__BaseClass", LINQ_TEMPLATES_LIBRARY) Then fFailed = True
          
70        If Not AutoUpdateClassIfNecessary("BooleanQ", LINQ_NULLABLE_DATA_TYPES_LIBRARY) Then fFailed = True
80        If Not AutoUpdateClassIfNecessary("ByteQ", LINQ_NULLABLE_DATA_TYPES_LIBRARY) Then fFailed = True
90        If Not AutoUpdateClassIfNecessary("CurrencyQ", LINQ_NULLABLE_DATA_TYPES_LIBRARY) Then fFailed = True
100       If Not AutoUpdateClassIfNecessary("DateQ", LINQ_NULLABLE_DATA_TYPES_LIBRARY) Then fFailed = True
110       If Not AutoUpdateClassIfNecessary("DoubleQ", LINQ_NULLABLE_DATA_TYPES_LIBRARY) Then fFailed = True
120       If Not AutoUpdateClassIfNecessary("IntegerQ", LINQ_NULLABLE_DATA_TYPES_LIBRARY) Then fFailed = True
130       If Not AutoUpdateClassIfNecessary("LongQ", LINQ_NULLABLE_DATA_TYPES_LIBRARY) Then fFailed = True
140       If Not AutoUpdateClassIfNecessary("SingleQ", LINQ_NULLABLE_DATA_TYPES_LIBRARY) Then fFailed = True
150       If Not AutoUpdateClassIfNecessary("StringQ", LINQ_NULLABLE_DATA_TYPES_LIBRARY) Then fFailed = True
160       If Not AutoUpdateClassIfNecessary("VariantQ", LINQ_NULLABLE_DATA_TYPES_LIBRARY) Then fFailed = True
170       If Not AutoUpdateClassIfNecessary("ConversionQ", LINQ_NULLABLE_DATA_TYPES_LIBRARY) Then fFailed = True
180       If Not AutoUpdateClassIfNecessary("NewQ", LINQ_NULLABLE_DATA_TYPES_LIBRARY) Then fFailed = True

190       AutoUpdateSupportingClasses = Not fFailed

PROC_EXIT:
200       Exit Function

PROC_ERROR:
210       LogError "_LINQ", "AutoUpdateSupportingClasses", Erl, Err.Number, Err.Description
220       Resume PROC_EXIT
230       Resume
End Function

Private Function AutoUpdateClassIfNecessary(ClassName As String, FromLibrary As String) As Boolean
10        On Error GoTo PROC_ERROR

20        AutoUpdateClassIfNecessary = SaveTemplateCode(ClassName, GetTemplateCode(ClassName, FromLibrary), True, vbext_ct_ClassModule)

PROC_EXIT:
30        Exit Function

PROC_ERROR:
40        LogError "_LINQ", "AutoUpdateClassIfNecessary", Erl, Err.Number, Err.Description
50        Resume PROC_EXIT
60        Resume
End Function

Public Function AutoGenerateDBC() As Boolean
10        On Error GoTo PROC_ERROR
          
          Dim strTemplateSource As String
20        strTemplateSource = GetTemplateCode(DBC_CLASS_NAME, LINQ_TEMPLATES_LIBRARY)
          
          Dim stb As New StringBuilder

          Dim db As DAO.Database
          Dim rs As DAO.Recordset
30        Set db = CurrentDb()
40        Set rs = db.OpenRecordset(LINQ_REMOTE_CONNECTIONS)
          
50        While Not rs.EOF
60            If stb.Length <> 0 Then
70                stb.AppendLine ""
80                stb.Append "    "
90            End If
100           stb.Append GetCodeClassEnum(rs!CodeClassName) & " = " & rs!ID
110           rs.MoveNext
120       Wend
          
130       ReplaceIfNecessary strTemplateSource, LINQ_ENUM_TEMPLATE, stb.Text
140       stb.Clear
150       stb.AppendLine strTemplateSource
160       stb.AppendLine ""
          
170       rs.MoveFirst
180       While Not rs.EOF
190           If IsObjectInCol(CurrentProject.AllModules, rs!CodeClassName) Then
200               stb.AppendLine "Public " & GetCodeClassPropertyName(rs!CodeClassName) & " As New " & rs!CodeClassName
210           End If
220           rs.MoveNext
230       Wend

240       AutoGenerateDBC = SaveTemplateCode(DBC_CLASS_NAME, stb.Text, True, vbext_ct_ClassModule)

PROC_EXIT:
250       Exit Function

PROC_ERROR:
260       LogError "_LINQ", "AutoGenerateDBC", Erl, Err.Number, Err.Description
270       Resume PROC_EXIT
280       Resume

End Function

Public Function AutoGenerateDatabaseClass(Optional ConnectionID As Integer = 1, Optional CloseCodeWindow As Boolean) As Boolean
10        On Error GoTo PROC_ERROR

20        If Not AutoUpdateSupportingClasses() Then Exit Function

          Dim dbConnection As clsDatabaseConnection
30        Set dbConnection = GetDatabaseConnection(ConnectionID)
          Dim strBaseCode As String
40        strBaseCode = GetTemplateCode("cls_LINQ_2_SQL_TEMPLATE", LINQ_TEMPLATES_LIBRARY)
50        With dbConnection
60            ReplaceIfNecessary strBaseCode, "cls_LINQ_2_SQL_TEMPLATE", .CodeClassName
70            ReplaceIfNecessary strBaseCode, "<Server>", .Server
80            ReplaceIfNecessary strBaseCode, "<Database>", .Database
90            ReplaceIfNecessary strBaseCode, "<Schema>", .Schema
100           ReplaceIfNecessary strBaseCode, LINQ_ENUM_TEMPLATE, GetCodeClassEnum(.CodeClassName)
110       End With
          
          Dim stb As New StringBuilder
120       stb.AppendLine strBaseCode
          Dim conn As ADODB.Connection
          Dim rs As ADODB.Recordset
          Dim colProcedures As New Collection
          Dim colFunctions As New Collection
130       Set conn = New ADODB.Connection
140       conn.Open dbConnection.ConnectionString
150       Set rs = conn.OpenSchema(adSchemaProcedures, Array(dbConnection.Database, dbConnection.Schema, Empty))
160       While Not rs.EOF
170           Select Case Left(rs!PROCEDURE_NAME, 3)
              Case "fn_", "dt_", "sp_"
                  ' Ignore
180           Case Else
190               Select Case Right(rs!PROCEDURE_NAME, 2)
                  Case ";1"
                      ' Trim the trialing ;1
200                   colProcedures.Add Replace(rs!PROCEDURE_NAME, ";1", "")
210               Case ";0"
                      ' Trim the trialing ;0
220                   colFunctions.Add Replace(rs!PROCEDURE_NAME, ";0", "")
230               Case Else
240                   LogError "_LINQ", "AutoGenerateDatabaseClass", Erl, LOG_CASE_ELSE, LOG_CASE_ELSE_DESC, rs!PROCEDURE_NAME
250               End Select
260           End Select
270           rs.MoveNext
280       Wend
          
290       sb.InitializeStatusMeter "Building " & dbConnection.CodeClassName, colProcedures.Count + colFunctions.Count
          Dim strProcedureName
300       For Each strProcedureName In colProcedures
310           sb.IncrementStatusMeter
320           stb.AppendLine GetSProcText(ConnectionID, CStr(strProcedureName), dbConnection.CodeClassName, False, True, "")
330           stb.AppendLine GetSProcText(ConnectionID, CStr(strProcedureName), dbConnection.CodeClassName, False, True, "Q")
340       Next
350       For Each strProcedureName In colFunctions
360           sb.IncrementStatusMeter
370           stb.AppendLine GetSProcText(ConnectionID, CStr(strProcedureName), dbConnection.CodeClassName, True, True, "")
380           stb.AppendLine GetSProcText(ConnectionID, CStr(strProcedureName), dbConnection.CodeClassName, True, True, "Q")
390       Next
400       sb.ClearStatusMeter
410       conn.Close
420       Set conn = Nothing
          
430       AutoGenerateDatabaseClass = SaveTemplateCode(dbConnection.CodeClassName, stb.Text, CloseCodeWindow)
          
PROC_EXIT:
440       Exit Function

PROC_ERROR:
450       LogError "_LINQ", "AutoGenerateClass", Erl, Err.Number, Err.Description
460       Resume PROC_EXIT
470       Resume

End Function

Private Function CurrentVBProject() As VBProject
          Dim p As VBProject
10        On Error GoTo PROC_ERROR

20        For Each p In Application.VBE.VBProjects
30            If p.FileName = CurrentDb.Name Then
40                Set CurrentVBProject = p
50                Exit Function
60            End If
70        Next

PROC_EXIT:
80        Exit Function

PROC_ERROR:
90        LogError "_LINQ", "CurrentVBProject", Erl, Err.Number, Err.Description
100       Resume PROC_EXIT
110       Resume
End Function

Public Function GetTemplateCode(ModuleName As String, LibraryName As String) As String
10        On Error GoTo PROC_ERROR

      '    Dim strBaseCode As String
      '    With Application.VBE.VBProjects(FromLibrary).VBComponents(ClassName).CodeModule
      '        strBaseCode = .Lines(1, .CountOfLines)
      '    End With
          
          Dim rs As DAO.Recordset2
20        Set rs = CodeDb.OpenRecordset("SELECT Modules.FileData As FileData FROM " & LINQ_TEMPLATE_LIBRARIES_TABLE & " WHERE LibraryName='" & LibraryName & "' AND Modules.FileName='" & ModuleName & ".def'")
          
          Dim strTempFile As String
30        strTempFile = GetTempFile(ModuleName, "txt")
          
          Dim fldFileData As DAO.Field2
40        Set fldFileData = rs!FileData
50        fldFileData.SaveToFile strTempFile
          
          Dim strBaseCode As String
60        strBaseCode = ReadTextFile(strTempFile)
70        gFSO.DeleteFile strTempFile
          
80        ReplaceIfNecessary strBaseCode, "<TOOL_VERSION>", TOOL_VERSION
90        ReplaceIfNecessary strBaseCode, "<NOW>", Format(Now, "yyyy-mm-dd h:mm AM/PM")
100       ReplaceIfNecessary strBaseCode, "<SOURCE_URL>", LINQ_SOURCE_URL

110       GetTemplateCode = strBaseCode

PROC_EXIT:
120       Exit Function

PROC_ERROR:
130       LogError "_LINQ", "GetTemplateCode", Erl, Err.Number, Err.Description
140       Resume PROC_EXIT
150       Resume
End Function

Private Function SaveTemplateCode(ModuleName As String, Text As String, Optional CloseCodeWindow As Boolean = False, Optional ComponentType As VBIDE.vbext_ComponentType = vbext_ct_ClassModule) As Boolean
10        On Error GoTo PROC_ERROR
              
20        If Not IsObjectInCol(CurrentProject.AllModules, ModuleName) Then
30            LoadModuleText ModuleName, Text
40        End If

          Dim strCurrentSource As String
50        strCurrentSource = GetModuleText(ModuleName)
          
60        If strCurrentSource = Text Then
              ' Ignore because it is identical
70        ElseIf strCurrentSource = Text & vbCrLf Then  ' Sometimes templates differ by just a newline
              ' Ignore because it is identical
80            Debug.Print "Ignoring " & ModuleName & " because it is identical 1"
90        ElseIf strCurrentSource = Text & vbCrLf & vbCrLf Then  ' Sometimes templates differ by just a newline
              ' Ignore because it is identical
100           Debug.Print "Ignoring " & ModuleName & " because it is identical 2"
110       ElseIf strCurrentSource = Text & vbCrLf & vbCrLf & vbCrLf Then  ' Sometimes templates differ by just a newline
              ' Ignore because it is identical
120           Debug.Print "Ignoring " & ModuleName & " because it is identical 3"
130       Else
140           If Not strCurrentSource Like "*<auto-generated>*" Then
150               CurrentVBProject().VBComponents(ModuleName).Activate
160               DoCmd.RunCommand acCmdVisualBasicEditor
170               If vbOK <> MsgBox("Are you sure you want to blast over " & ModuleName & "?", vbOKCancel + vbDefaultButton2) Then
180                   Exit Function
190               End If
200           End If
                  
210           LoadModuleText ModuleName, Text
220           If Not CloseCodeWindow Then CurrentVBProject().VBComponents(ModuleName).Activate
230       End If
          
240       SaveTemplateCode = True
          
PROC_EXIT:
250       Exit Function

PROC_ERROR:
260       LogError "_LINQ", "SaveTemplateCode", Erl, Err.Number, Err.Description
270       Resume PROC_EXIT
280       Resume
End Function

Public Function SpReturnsRecords(ConnectionID As Integer, Schema As String, ProcedureName As String) As Boolean
          Dim conn As New ADODB.Connection
10        On Error GoTo PROC_ERROR

20        conn.Open GetDatabaseConnection(ConnectionID).ConnectionString
30        SpReturnsRecords = SProcReturnsRecords(conn, Schema, ProcedureName)

PROC_EXIT:
40        Exit Function

PROC_ERROR:
50        LogError "_LINQ", "SpReturnsRecords", Erl, Err.Number, Err.Description
60        Resume PROC_EXIT
70        Resume
End Function

Public Function SProcReturnsRecords(conn As ADODB.Connection, Schema As String, ProcedureName As String) As Boolean
10        On Error GoTo PROC_ERROR

20        On Error GoTo PROC_ERROR

          Dim rsColumns As ADODB.Recordset
          Dim cmdGetColumns As ADODB.Command
30        Set cmdGetColumns = New ADODB.Command
40        With cmdGetColumns
50            .CommandText = "sys.sp_describe_first_result_set"
60            .CommandType = adCmdStoredProc
70            .Parameters.Append .CreateParameter("@tsql", adLongVarWChar, adParamInput, 255, Schema & "." & ProcedureName)
80            .ActiveConnection = conn
90            Set rsColumns = .Execute
100       End With
110       SProcReturnsRecords = Not rsColumns.EOF

PROC_EXIT:
120       Exit Function

PROC_ERROR:

130       Select Case Err.Number
              Case -2147217900 ' [Microsoft][SQL Server]The metadata could not be determined because there are no code paths that reach the end of the batch.
140               SProcReturnsRecords = False
150               Resume PROC_EXIT

160           Case Else
170               LogError "_LINQ", "SProcReturnsRecords", Erl, Err.Number, Err.Description, ProcedureName
180               Resume PROC_EXIT
190               Resume
200       End Select

End Function

Public Function GetVBParameterName(SQLParameterName As String) As String
10        On Error GoTo PROC_ERROR

          Dim strName As String
20        strName = Mid(SQLParameterName, 2) ' Chop off the @
30        ReplaceIfNecessary strName, "#", "_" ' Handle #'s in parameter names
40        Select Case LCase(strName)
          Case "date", "string", "integer", "long"
50            GetVBParameterName = strName & "Param"
60        Case Else
70            GetVBParameterName = strName
80        End Select

PROC_EXIT:
90        Exit Function

PROC_ERROR:
100       LogError "_LINQ", "GetVBParameterName", Erl, Err.Number, Err.Description
110       Resume PROC_EXIT
120       Resume

End Function

Public Function GetSQLParameterName(SQLParameterName As String) As String
10        On Error GoTo PROC_ERROR

          Dim strName As String
20        strName = Mid(SQLParameterName, 2)
30        GetSQLParameterName = strName
          
PROC_EXIT:
40        Exit Function

PROC_ERROR:
50        LogError "_LINQ", "GetSQLParameterName", Erl, Err.Number, Err.Description
60        Resume PROC_EXIT
70        Resume

End Function