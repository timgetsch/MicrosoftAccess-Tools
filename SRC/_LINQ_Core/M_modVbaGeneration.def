Option Compare Database
Option Explicit


Public Function GetSProcText(ConnectionID As Integer, ProcedureName As String, ClassName As String, IsFunction As Boolean, _
                            Optional IncludeLineNumbers As Boolean = True, _
                            Optional DataTypeSuffix As String = "") As String
10        On Error GoTo PROC_ERROR

          Dim conn As ADODB.Connection
          Dim rsParameters As ADODB.Recordset
          Dim strVBParam As String
          Dim strSQLParam As String
          Dim dbConnection As clsDatabaseConnection
20        Set dbConnection = GetDatabaseConnection(ConnectionID)
30        Set conn = New ADODB.Connection
40        conn.Open dbConnection.ConnectionString
50        Set rsParameters = conn.OpenSchema(adSchemaProcedureParameters, Array(dbConnection.Database, dbConnection.Schema, ProcedureName))
          Dim fReturnsRecords As Boolean
60        fReturnsRecords = SProcReturnsRecords(conn, dbConnection.Schema, ProcedureName)
          
          Dim PrevLine As Integer
70        If Not IncludeLineNumbers Then PrevLine = -1
          Dim sb As New StringBuilder
80        sb.AppendLine "'-----------------------------------------------------------"
90        sb.AppendLine "' DO NOT MODIFY - This was auto-generated by _LINQ_2_SQL"
100       sb.AppendLine "'-----------------------------------------------------------"
110       sb.Append "Public Function " & ProcedureName & DataTypeSuffix & "("
120       If rsParameters.RecordCount <> 0 Then rsParameters.MoveFirst
          Dim strParamIndent As String
130       strParamIndent = Space(10)
          Dim strReturnDataType As String
          Dim iParameter As Integer
          Dim fContainsUserDefinedDataTypes As Boolean
140       While Not rsParameters.EOF
150           Select Case rsParameters!PARAMETER_TYPE
              Case adParamInput
160               iParameter = iParameter + 1
170               If iParameter Mod 5 = 0 Then
180                   sb.AppendLine " _"
190                   sb.Append strParamIndent
200               Else
210                   sb.Append " "
220               End If
                  Const UserDefinedVbDataType As String = "ADODB.Recordset"
                  Dim strParamVbDataType As String
230               strParamVbDataType = GetVbDataType(rsParameters!TYPE_NAME, DataTypeSuffix, UserDefinedVbDataType)
240               If Not fContainsUserDefinedDataTypes Then
250                   fContainsUserDefinedDataTypes = strParamVbDataType = UserDefinedVbDataType
260               End If
270               sb.Append GetVBParameterName(rsParameters!PARAMETER_NAME) & " AS " & strParamVbDataType & ","
280           Case adParamOutput, adParamInputOutput
290               iParameter = iParameter + 1
300               If iParameter Mod 5 = 0 Then
310                   sb.AppendLine " _"
320                   sb.Append strParamIndent
330               Else
340                   sb.Append " "
350               End If
360               sb.Append "ByRef " & GetVBParameterName(rsParameters!PARAMETER_NAME) & " AS " & GetVbDataType(rsParameters!TYPE_NAME, DataTypeSuffix) & ","
370           Case adParamReturnValue
380               Debug.Assert rsParameters!PARAMETER_NAME = "@RETURN_VALUE"
390               If IsFunction And fReturnsRecords Then
400                   strReturnDataType = "ADODB.Recordset"
410               Else
420                   strReturnDataType = GetVbDataType(rsParameters!TYPE_NAME, DataTypeSuffix)
430               End If
440           Case Else
450               Debug.Assert False
460           End Select
470           rsParameters.MoveNext
480       Wend
490       sb.AppendLine " _"
500       sb.Append strParamIndent
510       If Not IsFunction Then
520           If fReturnsRecords Then
530               sb.Append "ByRef ReturnRS as ADODB.Recordset, "
540               sb.Append "Optional ByRef ReturnRecordsets as Collection, "
550           End If
560           sb.Append "Optional ByRef ReturnValue as " & strReturnDataType & ", "
570           sb.Append "Optional ByRef RecordsAffected As Long, "
580       End If
590       sb.Append "Optional ErrorOption As enErrorOption = eoLogAndRaiseError, "
600       sb.Append "Optional CommandTimeout As Integer = 30 _"
610       sb.AppendLine ""
620       sb.Append strParamIndent & ") As "
630       If IsFunction Then
640           If strReturnDataType = "" Then
650               fReturnsRecords = True
660               strReturnDataType = "ADODB.Recordset"
670           End If
680           sb.AppendLine strReturnDataType
690       Else
700           sb.AppendLine "Boolean"
710       End If
720       AppendCodeLine sb, PrevLine, "On Error GoTo PROC_ERROR"
730       sb.AppendLine ""
740       AppendCodeLine sb, PrevLine, "Dim strExtraInfo As String"
750       AppendCodeLine sb, PrevLine, "Dim cmd As New ADODB.Command"
760       AppendCodeLine sb, PrevLine, "cmd.CommandTimeout = CommandTimeout"
          
          Dim strAddToCollectionCommand As String
          Dim strParamCollection As String
          
770       If fContainsUserDefinedDataTypes Then
780           strParamCollection = "colParams"
790           AppendCodeLine sb, PrevLine, "Dim " & strParamCollection & " As New Collection"
800           strAddToCollectionCommand = strParamCollection & ".Add"
810       Else
820           strParamCollection = "cmd.Parameters"
830           strAddToCollectionCommand = strParamCollection & ".Append"
840       End If
          
850       If rsParameters.RecordCount <> 0 Then rsParameters.MoveFirst
860       While Not rsParameters.EOF
870           strVBParam = GetVBParameterName(rsParameters!PARAMETER_NAME)
880           strSQLParam = GetSQLParameterName(rsParameters!PARAMETER_NAME)
              Dim strSize As String
              Const MAX_LENGTH As Long = 10000000
890           strSize = Nz(rsParameters!CHARACTER_MAXIMUM_LENGTH, "0")
900           If strSize = "0" And NeedsSize(rsParameters!TYPE_NAME) Then strSize = CStr(MAX_LENGTH)
              Dim lSize As Long
910           lSize = Nz(rsParameters!CHARACTER_MAXIMUM_LENGTH, 0)
920           If lSize = 0 And NeedsSize(rsParameters!TYPE_NAME) Then lSize = MAX_LENGTH
              
930           Select Case rsParameters!PARAMETER_TYPE
              Case adParamInput
                  Dim strAdDataType As String
940               strAdDataType = GetadDataType(rsParameters!TYPE_NAME, lSize)
950               Select Case strAdDataType
                  Case "adDecimal"
960                   AppendCodeLine sb, PrevLine, "Dim prm" & strSQLParam & " As ADODB.Parameter"
970                   AppendCodeLine sb, PrevLine, "Set prm" & strSQLParam & " = cmd.CreateParameter(""" & strSQLParam & """, " & GetadDataType(rsParameters!TYPE_NAME, lSize) & ", adParamInput, " & strSize & ", " & strVBParam & ")"
980                   AppendCodeLine sb, PrevLine, strAddToCollectionCommand & " prm" & strSQLParam
990               Case "adEmpty" ' User-Defined
1000                  AppendCodeLine sb, PrevLine, strAddToCollectionCommand & " CreateTableValuedParameter(""" & strSQLParam & """, """ & rsParameters!TYPE_NAME & """, " & strVBParam & ")"
1010              Case Else
1020                  AppendCodeLine sb, PrevLine, strAddToCollectionCommand & " cmd.CreateParameter(""" & strSQLParam & """, " & GetadDataType(rsParameters!TYPE_NAME, lSize) & ", adParamInput, " & strSize & ", " & strVBParam & ")"
1030              End Select
1040          Case adParamOutput, adParamInputOutput
1050              AppendCodeLine sb, PrevLine, "Dim prm" & strSQLParam & " As ADODB.Parameter"
1060              AppendCodeLine sb, PrevLine, "Set prm" & strSQLParam & " = cmd.CreateParameter(""" & strSQLParam & """, " & GetadDataType(rsParameters!TYPE_NAME, lSize) & ", adParamInputOutput, " & strSize & ", " & strVBParam & ")"
1070              AppendCodeLine sb, PrevLine, strAddToCollectionCommand & " prm" & strSQLParam
1080          Case adParamReturnValue
1090              AppendCodeLine sb, PrevLine, "Dim prm" & strSQLParam & " As ADODB.Parameter"
1100              AppendCodeLine sb, PrevLine, "Set prm" & strSQLParam & " = cmd.CreateParameter(""" & strSQLParam & """, " & GetadDataType(rsParameters!TYPE_NAME, lSize) & ", adParamReturnValue" & IIf(strSize = "", "", ", " & strSize) & ")"
1110              AppendCodeLine sb, PrevLine, strAddToCollectionCommand & " prm" & strSQLParam
1120          Case Else
1130              Debug.Assert False
1140          End Select
              
1150          Select Case rsParameters!TYPE_NAME
              Case "decimal"
1160              AppendCodeLine sb, PrevLine, "prm" & strSQLParam & ".Precision = " & rsParameters!NUMERIC_PRECISION
1170              AppendCodeLine sb, PrevLine, "prm" & strSQLParam & ".NumericScale = " & rsParameters!NUMERIC_SCALE
1180          Case Else
                  ' Ignore
1190          End Select
1200          rsParameters.MoveNext
1210      Wend
          
1220      AppendCodeLine sb, PrevLine, "Dim strSQL As String"
1230      AppendCodeLine sb, PrevLine, "strSQL = " & LINQ_SQL_GENERATOR & ".GetSQL(""" & dbConnection.Schema & "." & ProcedureName & """, " & strParamCollection & ", " & IsFunction & ", " & fReturnsRecords & ")"
1240      AppendCodeLine sb, PrevLine, "strExtraInfo = strExtraInfo & strSQL"
1250      AppendCodeLine sb, PrevLine, "SET cmd.ActiveConnection = m_Base.Connection"
          
1260      If fContainsUserDefinedDataTypes Then
1270          AppendCodeLine sb, PrevLine, "cmd.CommandType = adCmdText"
1280          AppendCodeLine sb, PrevLine, "cmd.CommandText = strSQL"
1290      ElseIf IsFunction And fReturnsRecords Then
1300          AppendCodeLine sb, PrevLine, "cmd.CommandType = adCmdTable"
1310          If rsParameters.RecordCount <> 0 Then rsParameters.MoveFirst
              Dim colFunctionParameters As Collection
1320          Set colFunctionParameters = New Collection
1330          While Not rsParameters.EOF
1340              colFunctionParameters.Add "?"
1350              rsParameters.MoveNext
1360          Wend
              Dim strFunctionCall As String
1370          strFunctionCall = dbConnection.Schema & "." & ProcedureName & "(" & JoinCollection(colFunctionParameters, ", ") & ")"
1380          AppendCodeLine sb, PrevLine, "cmd.CommandText = """ & strFunctionCall & """"
1390      Else
1400          AppendCodeLine sb, PrevLine, "cmd.CommandType = adCmdStoredProc"
1410          AppendCodeLine sb, PrevLine, "cmd.CommandText = """ & dbConnection.Schema & "." & ProcedureName & """"
1420      End If
          
1430      If fContainsUserDefinedDataTypes Then
1440          If IsFunction Then
1450              If fReturnsRecords Then ' Table Valued Function
1460                  AppendCodeLine sb, PrevLine, "Dim ReturnRS As ADODB.Recordset"
1470                  AppendCodeLine sb, PrevLine, "Set ReturnRS = cmd.Execute"
1480              Else ' Scalar Function
1490                  AppendCodeLine sb, PrevLine, "Dim rsReturnValues As ADODB.Recordset"
1500                  AppendCodeLine sb, PrevLine, "Set rsReturnValues = cmd.Execute"
1510              End If
1520          Else
1530              If fReturnsRecords Then
1540                  AppendCodeLine sb, PrevLine, "Dim rs As ADODB.Recordset"
1550                  AppendCodeLine sb, PrevLine, "Set rs = cmd.Execute(RecordsAffected)"
1560                  AppendCodeLine sb, PrevLine, "Dim colRecordsets As Collection"
1570                  AppendCodeLine sb, PrevLine, "Set colRecordsets = " & LINQ_SHARED_MODULE & ".ConvertToInMemoryRecordsets(rs, """ & ProcedureName & """)"
1580                  AppendCodeLine sb, PrevLine, "Dim rsReturnValues As ADODB.Recordset"
1590                  AppendCodeLine sb, PrevLine, "Set rsReturnValues = colRecordsets(colRecordsets.Count)"
1600                  AppendCodeLine sb, PrevLine, "colRecordsets.Remove colRecordsets.Count"
1610                  AppendCodeLine sb, PrevLine, "Set ReturnRecordsets = colRecordsets"
1620                  AppendCodeLine sb, PrevLine, "Set ReturnRS = ReturnRecordsets(1)"
1630              Else
1640                  AppendCodeLine sb, PrevLine, "Dim rsReturnValues As ADODB.Recordset"
1650                  AppendCodeLine sb, PrevLine, "Set rsReturnValues = cmd.Execute(RecordsAffected)"
1660              End If
1670          End If
              
1680          If rsParameters.RecordCount <> 0 Then rsParameters.MoveFirst
1690          While Not rsParameters.EOF
1700              strVBParam = GetVBParameterName(rsParameters!PARAMETER_NAME)
1710              strSQLParam = GetSQLParameterName(rsParameters!PARAMETER_NAME)
1720              Select Case rsParameters!PARAMETER_TYPE
                  Case adParamInput
                      ' Ignore
1730              Case adParamOutput, adParamInputOutput
1740                  AppendCodeLine sb, PrevLine, strVBParam & " = rsReturnValues![" & strSQLParam & "].Value"
1750              Case adParamReturnValue
1760                  Debug.Assert rsParameters!PARAMETER_NAME = "@RETURN_VALUE"
1770                  If IsFunction Then
1780                      If DataTypeSuffix = "" Then
1790                          AppendCodeLine sb, PrevLine, ProcedureName & " = rsReturnValues![" & strSQLParam & "].Value"
1800                      Else
1810                          AppendCodeLine sb, PrevLine, "Set " & ProcedureName & DataTypeSuffix & " = " & GetVBNullableConversion(strReturnDataType) & "(rsReturnValues![" & strSQLParam & "].Value)"
1820                      End If
1830                  Else
1840                      If DataTypeSuffix = "" Then
1850                          AppendCodeLine sb, PrevLine, "ReturnValue = rsReturnValues![" & strSQLParam & "].Value"
1860                      Else
1870                          AppendCodeLine sb, PrevLine, "If Not ReturnValue Is Nothing Then ReturnValue = rsReturnValues![" & strSQLParam & "].Value"
1880                      End If
1890                  End If
1900              Case Else
1910                  Debug.Assert False
1920              End Select
1930              rsParameters.MoveNext
1940          Wend
1950      Else
1960          If IsFunction Then
1970              AppendCodeLine sb, PrevLine, "Dim ReturnRS As New ADODB.Recordset"
1980              AppendCodeLine sb, PrevLine, "ReturnRS.CursorLocation = adUseClient"
1990              AppendCodeLine sb, PrevLine, "ReturnRS.LockType = adLockOptimistic"
2000              AppendCodeLine sb, PrevLine, "ReturnRS.CursorType = adOpenStatic"
2010              AppendCodeLine sb, PrevLine, "ReturnRS.Open cmd"
2020          ElseIf fReturnsRecords Then
2030              AppendCodeLine sb, PrevLine, "Dim rs As ADODB.Recordset"
2040              AppendCodeLine sb, PrevLine, "Set rs = cmd.Execute(RecordsAffected)"
2050              AppendCodeLine sb, PrevLine, "Set ReturnRecordsets = " & LINQ_SHARED_MODULE & ".ConvertToInMemoryRecordsets(rs, """ & ProcedureName & """)"
2060              AppendCodeLine sb, PrevLine, "Set ReturnRS = ReturnRecordsets(1)"
2070          Else
2080              AppendCodeLine sb, PrevLine, "cmd.Execute RecordsAffected, , adExecuteNoRecords"
2090          End If
2100          If rsParameters.RecordCount <> 0 Then rsParameters.MoveFirst
2110          While Not rsParameters.EOF
2120              strVBParam = GetVBParameterName(rsParameters!PARAMETER_NAME)
2130              strSQLParam = GetSQLParameterName(rsParameters!PARAMETER_NAME)
2140              Select Case rsParameters!PARAMETER_TYPE
                  Case adParamInput
                      ' Ignore
2150              Case adParamOutput, adParamInputOutput
2160                  AppendCodeLine sb, PrevLine, strVBParam & " = prm" & strVBParam & ".Value"
2170              Case adParamReturnValue
2180                  Debug.Assert rsParameters!PARAMETER_NAME = "@RETURN_VALUE"
2190                  If IsFunction Then
2200                      If DataTypeSuffix = "" Then
2210                          AppendCodeLine sb, PrevLine, ProcedureName & " = prm" & strVBParam & ".Value"
2220                      Else
2230                          AppendCodeLine sb, PrevLine, "Set " & ProcedureName & DataTypeSuffix & " = " & GetVBNullableConversion(strReturnDataType) & "(prm" & strVBParam & ".Value)"
2240                      End If
2250                  Else
2260                      If DataTypeSuffix = "" Then
2270                          AppendCodeLine sb, PrevLine, "ReturnValue = prm" & strVBParam & ".Value"
2280                      Else
2290                          AppendCodeLine sb, PrevLine, "If Not ReturnValue Is Nothing Then ReturnValue = prm" & strVBParam & ".Value"
2300                      End If
2310                  End If
2320              Case Else
2330                  Debug.Assert False
2340              End Select
2350              rsParameters.MoveNext
2360          Wend
2370      End If
          
2380      If Not IsFunction Then
2390          sb.AppendLine ""
2400          AppendCodeLine sb, PrevLine, ProcedureName & DataTypeSuffix & " = True"
2410      ElseIf fReturnsRecords Then
2420          sb.AppendLine ""
2430          AppendCodeLine sb, PrevLine, "Set " & ProcedureName & DataTypeSuffix & " = " & LINQ_SHARED_MODULE & ".ConvertToInMemoryRecordset(ReturnRS, """ & ProcedureName & """)"
2440      End If
2450      sb.AppendLine ""
2460      sb.AppendLine "PROC_EXIT:"
2470      AppendCodeLine sb, PrevLine, "Exit Function"
2480      sb.AppendLine ""
2490      sb.AppendLine "PROC_ERROR:"
2500      AppendCodeLine sb, PrevLine, "If m_Base.HandleError(""" & dbConnection.CodeClassName & """, """ & ProcedureName & DataTypeSuffix & """, Erl, Err.Number, Err.Description, strExtraInfo, ErrorOption) Then"
2510      AppendCodeLine sb, PrevLine, "    cmd.ActiveConnection = m_Base.Connection"
2520      AppendCodeLine sb, PrevLine, "    Resume"
2530      AppendCodeLine sb, PrevLine, "End If"
2540      AppendCodeLine sb, PrevLine, "Resume PROC_EXIT"
2550      AppendCodeLine sb, PrevLine, "Resume"
2560      sb.AppendLine "End Function"
2570      GetSProcText = sb.Text

PROC_EXIT:
2580      On Error Resume Next
2590      If Not conn Is Nothing Then
2600          conn.Close
2610          Set conn = Nothing
2620      End If
2630      Exit Function

PROC_ERROR:
2640      LogError "_LINQ", "GetSProcText", Erl, Err.Number, Err.Description, ProcedureName
2650      Resume PROC_EXIT
2660      Resume

End Function

Private Sub AppendCodeLine(sb As StringBuilder, ByRef PreviousLineNumber As Integer, CodeLine As String, Optional SkipLineNumber As Boolean = False)
10        On Error GoTo PROC_ERROR
          
20        If PreviousLineNumber < 0 Then
30            sb.Append Space(4)
40        ElseIf SkipLineNumber Then
50            sb.Append Space(10)
60        Else
70            PreviousLineNumber = PreviousLineNumber + 10
              Dim strLineNumber As String
80            strLineNumber = CStr(PreviousLineNumber)
90            sb.Append strLineNumber
100           sb.Append Space(10 - Len(strLineNumber))
110       End If
120       sb.AppendLine CodeLine

PROC_EXIT:
130       Exit Sub

PROC_ERROR:
140       LogError "_LINQ", "AppendCodeLine", Erl, Err.Number, Err.Description
150       Resume PROC_EXIT
160       Resume

End Sub