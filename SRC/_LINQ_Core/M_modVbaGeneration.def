Option Compare Database
Option Explicit


Public Function GetSProcText(ConnectionID As Integer, ProcedureName As String, ClassName As String, IsFunction As Boolean, _
                            Optional IncludeLineNumbers As Boolean = True, _
                            Optional DataTypeSuffix As String = "") As String
10        On Error GoTo PROC_ERROR

          Dim conn As ADODB.Connection
          Dim rsParameters As ADODB.Recordset
          Dim strVBParam As String
          Dim strSQLParam As String
          Dim dbConnection As clsDatabaseConnection
20        Set dbConnection = GetDatabaseConnection(ConnectionID)
30        Set conn = New ADODB.Connection
40        conn.Open dbConnection.ConnectionString
50        Set rsParameters = conn.OpenSchema(adSchemaProcedureParameters, Array(dbConnection.Database, dbConnection.Schema, ProcedureName))
          Dim fReturnsRecords As Boolean
60        fReturnsRecords = SProcReturnsRecords(conn, dbConnection.Schema, ProcedureName)
          
          Dim PrevLine As Integer
70        If Not IncludeLineNumbers Then PrevLine = -1
          Dim sb As New StringBuilder
80        sb.AppendLine "'-----------------------------------------------------------"
90        sb.AppendLine "' DO NOT MODIFY - This was auto-generated by _LINQ_2_SQL"
100       sb.AppendLine "'-----------------------------------------------------------"
110       sb.Append "Public Function " & ProcedureName & DataTypeSuffix & "("
120       If rsParameters.RecordCount <> 0 Then rsParameters.MoveFirst
          Dim strParamIndent As String
130       strParamIndent = Space(10)
          Dim strReturnDataType As String
          Dim iParameter As Integer
          Dim fContainsUserDefinedDataTypes As Boolean
140       While Not rsParameters.EOF
150           Select Case rsParameters!PARAMETER_TYPE
              Case adParamInput
160               iParameter = iParameter + 1
170               If iParameter Mod 5 = 0 Then
180                   sb.AppendLine " _"
190                   sb.Append strParamIndent
200               Else
210                   sb.Append " "
220               End If
                  Const UserDefinedVbDataType As String = "ADODB.Recordset"
                  Dim strParamVbDataType As String
230               strParamVbDataType = GetVbDataType(rsParameters!TYPE_NAME, DataTypeSuffix, UserDefinedVbDataType)
240               If Not fContainsUserDefinedDataTypes Then
250                   fContainsUserDefinedDataTypes = strParamVbDataType = UserDefinedVbDataType
260               End If
270               sb.Append GetVBParameterName(rsParameters!PARAMETER_NAME) & " AS " & strParamVbDataType & ","
280           Case adParamOutput, adParamInputOutput
290               iParameter = iParameter + 1
300               If iParameter Mod 5 = 0 Then
310                   sb.AppendLine " _"
320                   sb.Append strParamIndent
330               Else
340                   sb.Append " "
350               End If
360               sb.Append "ByRef " & GetVBParameterName(rsParameters!PARAMETER_NAME) & " AS " & GetVbDataType(rsParameters!TYPE_NAME, DataTypeSuffix) & ","
370           Case adParamReturnValue
380               Debug.Assert rsParameters!PARAMETER_NAME = "@RETURN_VALUE"
390               If IsFunction And fReturnsRecords Then
400                   strReturnDataType = "ADODB.Recordset"
410               Else
420                   strReturnDataType = GetVbDataType(rsParameters!TYPE_NAME, DataTypeSuffix)
430               End If
440           Case Else
450               Debug.Assert False
460           End Select
470           rsParameters.MoveNext
480       Wend
490       sb.AppendLine " _"
500       sb.Append strParamIndent
510       If Not IsFunction Then
520           If fReturnsRecords Then
530               sb.Append "ByRef ReturnRS as ADODB.Recordset, "
540               sb.Append "Optional ByRef ReturnRecordsets as Collection, "
550           End If
560           sb.Append "Optional ByRef ReturnValue as " & strReturnDataType & ", "
570           sb.Append "Optional ByRef RecordsAffected As Long, "
580       End If
590       sb.Append "Optional ErrorOption As enErrorOption = eoLogAndRaiseError, "
600       sb.Append "Optional CommandTimeout As Integer = 30 _"
610       sb.AppendLine ""
620       sb.Append strParamIndent & ") As "
630       If IsFunction Then
640           If strReturnDataType = "" Then
650               fReturnsRecords = True
660               strReturnDataType = "ADODB.Recordset"
670           End If
680           sb.AppendLine strReturnDataType
690       Else
700           sb.AppendLine "Boolean"
710       End If
720       AppendCodeLine sb, PrevLine, "On Error GoTo PROC_ERROR"
730       sb.AppendLine ""
740       AppendCodeLine sb, PrevLine, "Dim strExtraInfo As String"
750       AppendCodeLine sb, PrevLine, "Dim cmd As New ADODB.Command"
760       AppendCodeLine sb, PrevLine, "cmd.CommandTimeout = CommandTimeout"
          
          Dim strAddToCollectionCommand As String
          Dim strParamCollection As String
          
770       If fContainsUserDefinedDataTypes Then
780           strParamCollection = "colParams"
790           AppendCodeLine sb, PrevLine, "Dim " & strParamCollection & " As New Collection"
800           strAddToCollectionCommand = strParamCollection & ".Add"
810       Else
820           strParamCollection = "cmd.Parameters"
830           strAddToCollectionCommand = strParamCollection & ".Append"
840       End If
          
850       If rsParameters.RecordCount <> 0 Then rsParameters.MoveFirst
860       While Not rsParameters.EOF
870           strVBParam = GetVBParameterName(rsParameters!PARAMETER_NAME)
880           strSQLParam = GetSQLParameterName(rsParameters!PARAMETER_NAME)
              Dim strSize As String
              Const MAX_LENGTH As Long = 10000000
890           strSize = Nz(rsParameters!CHARACTER_MAXIMUM_LENGTH, "0")
900           If strSize = "0" And NeedsSize(rsParameters!TYPE_NAME) Then strSize = CStr(MAX_LENGTH)
              Dim lSize As Long
910           lSize = Nz(rsParameters!CHARACTER_MAXIMUM_LENGTH, 0)
920           If lSize = 0 And NeedsSize(rsParameters!TYPE_NAME) Then lSize = MAX_LENGTH
              
930           Select Case rsParameters!PARAMETER_TYPE
              Case adParamInput
940               Select Case rsParameters!TYPE_NAME
                  Case "decimal"
950                   AppendCodeLine sb, PrevLine, "Dim prm" & strSQLParam & " As ADODB.Parameter"
960                   AppendCodeLine sb, PrevLine, "Set prm" & strSQLParam & " = cmd.CreateParameter(""" & strSQLParam & """, " & GetadDataType(rsParameters!TYPE_NAME, lSize) & ", adParamInput, " & strSize & ", " & strVBParam & ")"
970                   AppendCodeLine sb, PrevLine, strAddToCollectionCommand & " prm" & strSQLParam
980               Case Else
990                   AppendCodeLine sb, PrevLine, strAddToCollectionCommand & " cmd.CreateParameter(""" & strSQLParam & """, " & GetadDataType(rsParameters!TYPE_NAME, lSize) & ", adParamInput, " & strSize & ", " & strVBParam & ")"
1000              End Select
1010          Case adParamOutput, adParamInputOutput
1020              AppendCodeLine sb, PrevLine, "Dim prm" & strSQLParam & " As ADODB.Parameter"
1030              AppendCodeLine sb, PrevLine, "Set prm" & strSQLParam & " = cmd.CreateParameter(""" & strSQLParam & """, " & GetadDataType(rsParameters!TYPE_NAME, lSize) & ", adParamInputOutput, " & strSize & ", " & strVBParam & ")"
1040              AppendCodeLine sb, PrevLine, strAddToCollectionCommand & " prm" & strSQLParam
1050          Case adParamReturnValue
1060              AppendCodeLine sb, PrevLine, "Dim prm" & strSQLParam & " As ADODB.Parameter"
1070              AppendCodeLine sb, PrevLine, "Set prm" & strSQLParam & " = cmd.CreateParameter(""" & strSQLParam & """, " & GetadDataType(rsParameters!TYPE_NAME, lSize) & ", adParamReturnValue" & IIf(strSize = "", "", ", " & strSize) & ")"
1080              AppendCodeLine sb, PrevLine, strAddToCollectionCommand & " prm" & strSQLParam
1090          Case Else
1100              Debug.Assert False
1110          End Select
              
1120          Select Case rsParameters!TYPE_NAME
              Case "decimal"
1130              AppendCodeLine sb, PrevLine, "prm" & strSQLParam & ".Precision = " & rsParameters!NUMERIC_PRECISION
1140              AppendCodeLine sb, PrevLine, "prm" & strSQLParam & ".NumericScale = " & rsParameters!NUMERIC_SCALE
1150          Case Else
                  ' Ignore
1160          End Select
1170          rsParameters.MoveNext
1180      Wend
          
1190      AppendCodeLine sb, PrevLine, "Dim strSQL As String"
1200      AppendCodeLine sb, PrevLine, "strSQL = " & LINQ_SQL_GENERATOR & ".GetSQL(""" & dbConnection.Schema & "." & ProcedureName & """, " & strParamCollection & ")"
1210      AppendCodeLine sb, PrevLine, "strExtraInfo = strExtraInfo & strSQL"
1220      AppendCodeLine sb, PrevLine, "SET cmd.ActiveConnection = m_Base.Connection"
          
1230      If fContainsUserDefinedDataTypes Then
1240          AppendCodeLine sb, PrevLine, "cmd.CommandType = adCmdText"
1250          AppendCodeLine sb, PrevLine, "cmd.CommandText = strSQL"
1260      ElseIf IsFunction And fReturnsRecords Then
1270          AppendCodeLine sb, PrevLine, "cmd.CommandType = adCmdTable"
1280          If rsParameters.RecordCount <> 0 Then rsParameters.MoveFirst
              Dim colFunctionParameters As Collection
1290          Set colFunctionParameters = New Collection
1300          While Not rsParameters.EOF
1310              colFunctionParameters.Add "?"
1320              rsParameters.MoveNext
1330          Wend
              Dim strFunctionCall As String
1340          strFunctionCall = dbConnection.Schema & "." & ProcedureName & "(" & JoinCollection(colFunctionParameters, ", ") & ")"
1350          AppendCodeLine sb, PrevLine, "cmd.CommandText = """ & strFunctionCall & """"
1360      Else
1370          AppendCodeLine sb, PrevLine, "cmd.CommandType = adCmdStoredProc"
1380          AppendCodeLine sb, PrevLine, "cmd.CommandText = """ & dbConnection.Schema & "." & ProcedureName & """"
1390      End If
          
1400      If fContainsUserDefinedDataTypes Then
1410          AppendCodeLine sb, PrevLine, "Dim rs As ADODB.Recordset"
1420          If IsFunction Then
1430              AppendCodeLine sb, PrevLine, "Set rs = cmd.Execute"
1440          Else
1450              AppendCodeLine sb, PrevLine, "Set rs = cmd.Execute(RecordsAffected)"
1460          End If
1470          AppendCodeLine sb, PrevLine, "Dim colRecordsets As Collection"
1480          AppendCodeLine sb, PrevLine, "Set colRecordsets = " & LINQ_SHARED_MODULE & ".ConvertToInMemoryRecordsets(rs, """ & ProcedureName & """)"
1490          AppendCodeLine sb, PrevLine, "Dim rsReturnValues As ADODB.Recordset"
1500          AppendCodeLine sb, PrevLine, "Set rsReturnValues = colRecordsets(colRecordsets.Count)"
1510          AppendCodeLine sb, PrevLine, "colRecordsets.Remove colRecordsets.Count"
              
1520          If fReturnsRecords Then
1530              If IsFunction Then
1540                  AppendCodeLine sb, PrevLine, "Set ReturnRS = rsReturnValues"
1550              Else
1560                  AppendCodeLine sb, PrevLine, "Set ReturnRecordsets = colRecordsets"
1570                  AppendCodeLine sb, PrevLine, "Set ReturnRS = ReturnRecordsets(1)"
1580              End If
1590          End If
              
1600          If rsParameters.RecordCount <> 0 Then rsParameters.MoveFirst
1610          While Not rsParameters.EOF
1620              strVBParam = GetVBParameterName(rsParameters!PARAMETER_NAME)
1630              strSQLParam = GetSQLParameterName(rsParameters!PARAMETER_NAME)
1640              Select Case rsParameters!PARAMETER_TYPE
                  Case adParamInput
                      ' Ignore
1650              Case adParamOutput, adParamInputOutput
1660                  AppendCodeLine sb, PrevLine, strVBParam & " = rsReturnValues![" & strSQLParam & "].Value"
1670              Case adParamReturnValue
1680                  Debug.Assert rsParameters!PARAMETER_NAME = "@RETURN_VALUE"
1690                  If IsFunction Then
1700                      If DataTypeSuffix = "" Then
1710                          AppendCodeLine sb, PrevLine, ProcedureName & " = rsReturnValues![" & strSQLParam & "].Value"
1720                      Else
1730                          AppendCodeLine sb, PrevLine, "Set " & ProcedureName & DataTypeSuffix & " = " & GetVBNullableConversion(strReturnDataType) & "(rsReturnValues![" & strSQLParam & "].Value)"
1740                      End If
1750                  Else
1760                      If DataTypeSuffix = "" Then
1770                          AppendCodeLine sb, PrevLine, "ReturnValue = rsReturnValues![" & strSQLParam & "].Value"
1780                      Else
1790                          AppendCodeLine sb, PrevLine, "If Not ReturnValue Is Nothing Then ReturnValue = rsReturnValues![" & strSQLParam & "].Value"
1800                      End If
1810                  End If
1820              Case Else
1830                  Debug.Assert False
1840              End Select
1850              rsParameters.MoveNext
1860          Wend
1870      Else
1880          If IsFunction Then
1890              AppendCodeLine sb, PrevLine, "Dim ReturnRS As New ADODB.Recordset"
1900              AppendCodeLine sb, PrevLine, "ReturnRS.CursorLocation = adUseClient"
1910              AppendCodeLine sb, PrevLine, "ReturnRS.LockType = adLockOptimistic"
1920              AppendCodeLine sb, PrevLine, "ReturnRS.CursorType = adOpenStatic"
1930              AppendCodeLine sb, PrevLine, "ReturnRS.Open cmd"
1940          ElseIf fReturnsRecords Then
1950              AppendCodeLine sb, PrevLine, "Dim rs As ADODB.Recordset"
1960              AppendCodeLine sb, PrevLine, "Set rs = cmd.Execute(RecordsAffected)"
1970              AppendCodeLine sb, PrevLine, "Set ReturnRecordsets = " & LINQ_SHARED_MODULE & ".ConvertToInMemoryRecordsets(rs, """ & ProcedureName & """)"
1980              AppendCodeLine sb, PrevLine, "Set ReturnRS = ReturnRecordsets(1)"
1990          Else
2000              AppendCodeLine sb, PrevLine, "cmd.Execute RecordsAffected, , adExecuteNoRecords"
2010          End If
2020          If rsParameters.RecordCount <> 0 Then rsParameters.MoveFirst
2030          While Not rsParameters.EOF
2040              strVBParam = GetVBParameterName(rsParameters!PARAMETER_NAME)
2050              strSQLParam = GetSQLParameterName(rsParameters!PARAMETER_NAME)
2060              Select Case rsParameters!PARAMETER_TYPE
                  Case adParamInput
                      ' Ignore
2070              Case adParamOutput, adParamInputOutput
2080                  AppendCodeLine sb, PrevLine, strVBParam & " = prm" & strVBParam & ".Value"
2090              Case adParamReturnValue
2100                  Debug.Assert rsParameters!PARAMETER_NAME = "@RETURN_VALUE"
2110                  If IsFunction Then
2120                      If DataTypeSuffix = "" Then
2130                          AppendCodeLine sb, PrevLine, ProcedureName & " = prm" & strVBParam & ".Value"
2140                      Else
2150                          AppendCodeLine sb, PrevLine, "Set " & ProcedureName & DataTypeSuffix & " = " & GetVBNullableConversion(strReturnDataType) & "(prm" & strVBParam & ".Value)"
2160                      End If
2170                  Else
2180                      If DataTypeSuffix = "" Then
2190                          AppendCodeLine sb, PrevLine, "ReturnValue = prm" & strVBParam & ".Value"
2200                      Else
2210                          AppendCodeLine sb, PrevLine, "If Not ReturnValue Is Nothing Then ReturnValue = prm" & strVBParam & ".Value"
2220                      End If
2230                  End If
2240              Case Else
2250                  Debug.Assert False
2260              End Select
2270              rsParameters.MoveNext
2280          Wend
2290      End If
          
2300      If Not IsFunction Then
2310          sb.AppendLine ""
2320          AppendCodeLine sb, PrevLine, ProcedureName & DataTypeSuffix & " = True"
2330      ElseIf fReturnsRecords Then
2340          sb.AppendLine ""
2350          AppendCodeLine sb, PrevLine, "Set " & ProcedureName & DataTypeSuffix & " = " & LINQ_SHARED_MODULE & ".ConvertToInMemoryRecordset(ReturnRS, """ & ProcedureName & """)"
2360      End If
2370      sb.AppendLine ""
2380      sb.AppendLine "PROC_EXIT:"
2390      AppendCodeLine sb, PrevLine, "Exit Function"
2400      sb.AppendLine ""
2410      sb.AppendLine "PROC_ERROR:"
2420      AppendCodeLine sb, PrevLine, "If m_Base.HandleError(""" & dbConnection.CodeClassName & """, """ & ProcedureName & DataTypeSuffix & """, Erl, Err.Number, Err.Description, strExtraInfo, ErrorOption) Then"
2430      AppendCodeLine sb, PrevLine, "    cmd.ActiveConnection = m_Base.Connection"
2440      AppendCodeLine sb, PrevLine, "    Resume"
2450      AppendCodeLine sb, PrevLine, "End If"
2460      AppendCodeLine sb, PrevLine, "Resume PROC_EXIT"
2470      AppendCodeLine sb, PrevLine, "Resume"
2480      sb.AppendLine "End Function"
2490      GetSProcText = sb.Text

PROC_EXIT:
2500      On Error Resume Next
2510      If Not conn Is Nothing Then
2520          conn.Close
2530          Set conn = Nothing
2540      End If
2550      Exit Function

PROC_ERROR:
2560      LogError "_LINQ", "GetSProcText", Erl, Err.Number, Err.Description, ProcedureName
2570      Resume PROC_EXIT
2580      Resume

End Function

Private Sub AppendCodeLine(sb As StringBuilder, ByRef PreviousLineNumber As Integer, CodeLine As String, Optional SkipLineNumber As Boolean = False)
10        On Error GoTo PROC_ERROR
          
20        If PreviousLineNumber < 0 Then
30            sb.Append Space(4)
40        ElseIf SkipLineNumber Then
50            sb.Append Space(10)
60        Else
70            PreviousLineNumber = PreviousLineNumber + 10
              Dim strLineNumber As String
80            strLineNumber = CStr(PreviousLineNumber)
90            sb.Append strLineNumber
100           sb.Append Space(10 - Len(strLineNumber))
110       End If
120       sb.AppendLine CodeLine

PROC_EXIT:
130       Exit Sub

PROC_ERROR:
140       LogError "_LINQ", "AppendCodeLine", Erl, Err.Number, Err.Description
150       Resume PROC_EXIT
160       Resume

End Sub