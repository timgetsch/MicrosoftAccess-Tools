Option Compare Database
Option Explicit


Public Function GetSProcText(ConnectionID As Integer, ProcedureName As String, ClassName As String, IsFunction As Boolean, _
                            Optional IncludeLineNumbers As Boolean = True, _
                            Optional DataTypeSuffix As String = "") As String
10        On Error GoTo PROC_ERROR

          Dim conn As ADODB.Connection
          Dim rsParameters As ADODB.Recordset
          Dim strVBParam As String
          Dim strSQLParam As String
          Dim dbConnection As clsDatabaseConnection
20        Set dbConnection = GetDatabaseConnection(ConnectionID)
30        Set conn = New ADODB.Connection
40        conn.Open dbConnection.ConnectionString
50        Set rsParameters = conn.OpenSchema(adSchemaProcedureParameters, Array(dbConnection.Database, dbConnection.Schema, ProcedureName))
          Dim fReturnsRecords As Boolean
60        fReturnsRecords = SProcReturnsRecords(conn, dbConnection.Schema, ProcedureName)
          
          Dim PrevLine As Integer
70        If Not IncludeLineNumbers Then PrevLine = -1
          Dim sb As New StringBuilder
80        sb.AppendLine "'-----------------------------------------------------------"
90        sb.AppendLine "' DO NOT MODIFY - This was auto-generated by _LINQ_2_SQL"
          'sb.AppendLine "' ?[_LINQ].AutoGenerateDatabaseClass(" & dbConnection.EnumName & ")"
          'sb.AppendLine "' ?[_LINQ].GetSProcText(" & dbConnection.EnumName & ", """ & ProcedureName & """, """ & ClassName & """, " & IsFunction & ", " & IncludeLineNumbers & ",""" & DataTypeSuffix & """)"
          'sb.AppendLine "' DO NOT MODIFY - This was auto-generated by _LINQ"
100       sb.AppendLine "'-----------------------------------------------------------"
110       sb.Append "Public Function " & ProcedureName & DataTypeSuffix & "("
120       If rsParameters.RecordCount <> 0 Then rsParameters.MoveFirst
          Dim strParamIndent As String
130       strParamIndent = Space(10)
          Dim strReturnDataType As String
          Dim iParameter As Integer
140       While Not rsParameters.EOF
150           Select Case rsParameters!PARAMETER_TYPE
              Case adParamInput
160               iParameter = iParameter + 1
170               If iParameter Mod 5 = 0 Then
180                   sb.AppendLine " _"
190                   sb.Append strParamIndent
200               Else
210                   sb.Append " "
220               End If
230               sb.Append GetVBParameterName(rsParameters!PARAMETER_NAME) & " AS " & GetVBDataType(rsParameters!TYPE_NAME, DataTypeSuffix) & ","
240           Case adParamOutput, adParamInputOutput
250               iParameter = iParameter + 1
260               If iParameter Mod 5 = 0 Then
270                   sb.AppendLine " _"
280                   sb.Append strParamIndent
290               Else
300                   sb.Append " "
310               End If
320               sb.Append "ByRef " & GetVBParameterName(rsParameters!PARAMETER_NAME) & " AS " & GetVBDataType(rsParameters!TYPE_NAME, DataTypeSuffix) & ","
330           Case adParamReturnValue
340               Debug.Assert rsParameters!PARAMETER_NAME = "@RETURN_VALUE"
350               If IsFunction And fReturnsRecords Then
360                   strReturnDataType = "ADODB.Recordset"
370               Else
380                   strReturnDataType = GetVBDataType(rsParameters!TYPE_NAME, DataTypeSuffix)
390               End If
400           Case Else
410               Debug.Assert False
420           End Select
430           rsParameters.MoveNext
440       Wend
450       sb.AppendLine " _"
460       sb.Append strParamIndent
470       If Not IsFunction Then
480           If fReturnsRecords Then
490               sb.Append "ByRef ReturnRS as ADODB.Recordset, "
500               sb.Append "Optional ByRef ReturnRecordsets as Collection, "
510           End If
520           sb.Append "Optional ByRef ReturnValue as " & strReturnDataType & ", "
530           sb.Append "Optional ByRef RecordsAffected As Long, "
540       End If
550       sb.Append "Optional ErrorOption As enErrorOption = eoLogAndRaiseError, "
560       sb.Append "Optional CommandTimeout As Integer = 30 _"
570       sb.AppendLine ""
580       sb.Append strParamIndent & ") As "
590       If IsFunction Then
600           If strReturnDataType = "" Then
610               fReturnsRecords = True
620               strReturnDataType = "ADODB.Recordset"
630           End If
640           sb.AppendLine strReturnDataType
650       Else
660           sb.AppendLine "Boolean"
670       End If
680       AppendCodeLine sb, PrevLine, "On Error GoTo PROC_ERROR"
690       sb.AppendLine ""
700       AppendCodeLine sb, PrevLine, "Dim strExtraInfo As String"
710       AppendCodeLine sb, PrevLine, "Dim cmd As New ADODB.Command"
720       AppendCodeLine sb, PrevLine, "cmd.CommandTimeout = CommandTimeout"
730       If IsFunction And fReturnsRecords Then
740           AppendCodeLine sb, PrevLine, "cmd.CommandType = adCmdTable"
750           If rsParameters.RecordCount <> 0 Then rsParameters.MoveFirst
              Dim colFunctionParameters As Collection
              'Set colFunctionParameters = RsToCol(rsParameters, "PARAMETER_NAME", "PARAMETER_NAME")
760           Set colFunctionParameters = New Collection
770           While Not rsParameters.EOF
780               colFunctionParameters.Add "?"
790               rsParameters.MoveNext
800           Wend
              Dim strFunctionCall As String
810           strFunctionCall = dbConnection.Schema & "." & ProcedureName & "(" & JoinCollection(colFunctionParameters, ", ") & ")"
820           AppendCodeLine sb, PrevLine, "cmd.CommandText = """ & strFunctionCall & """"
830       Else
840           AppendCodeLine sb, PrevLine, "cmd.CommandType = adCmdStoredProc"
850           AppendCodeLine sb, PrevLine, "cmd.CommandText = """ & dbConnection.Schema & "." & ProcedureName & """"
860       End If
870       If rsParameters.RecordCount <> 0 Then rsParameters.MoveFirst
880       While Not rsParameters.EOF
890           strVBParam = GetVBParameterName(rsParameters!PARAMETER_NAME)
900           strSQLParam = GetSQLParameterName(rsParameters!PARAMETER_NAME)
              Dim strSize As String
              Const MAX_LENGTH As Long = 10000000
910           strSize = Nz(rsParameters!CHARACTER_MAXIMUM_LENGTH, "0")
920           If strSize = "0" And NeedsSize(rsParameters!TYPE_NAME) Then strSize = CStr(MAX_LENGTH)
              Dim lSize As Long
930           lSize = Nz(rsParameters!CHARACTER_MAXIMUM_LENGTH, 0)
940           If lSize = 0 And NeedsSize(rsParameters!TYPE_NAME) Then lSize = MAX_LENGTH
950           Select Case rsParameters!PARAMETER_TYPE
              Case adParamInput
960               Select Case rsParameters!TYPE_NAME
                  Case "decimal"
970                   AppendCodeLine sb, PrevLine, "Dim prm" & strSQLParam & " As ADODB.Parameter"
980                   AppendCodeLine sb, PrevLine, "Set prm" & strSQLParam & " = cmd.CreateParameter(""" & strSQLParam & """, " & GetadDataType(rsParameters!TYPE_NAME, lSize) & ", adParamInput, " & strSize & ", " & strVBParam & ")"
990                   AppendCodeLine sb, PrevLine, "cmd.Parameters.Append prm" & strSQLParam
1000              Case Else
1010                  AppendCodeLine sb, PrevLine, "cmd.Parameters.Append cmd.CreateParameter(""" & strSQLParam & """, " & GetadDataType(rsParameters!TYPE_NAME, lSize) & ", adParamInput, " & strSize & ", " & strVBParam & ")"
1020              End Select
1030          Case adParamOutput, adParamInputOutput
1040              AppendCodeLine sb, PrevLine, "Dim prm" & strSQLParam & " As ADODB.Parameter"
1050              AppendCodeLine sb, PrevLine, "Set prm" & strSQLParam & " = cmd.CreateParameter(""" & strSQLParam & """, " & GetadDataType(rsParameters!TYPE_NAME, lSize) & ", adParamInputOutput, " & strSize & ", " & strVBParam & ")"
1060              AppendCodeLine sb, PrevLine, "cmd.Parameters.Append prm" & strSQLParam
1070          Case adParamReturnValue
1080              AppendCodeLine sb, PrevLine, "Dim prm" & strSQLParam & " As ADODB.Parameter"
1090              AppendCodeLine sb, PrevLine, "Set prm" & strSQLParam & " = cmd.CreateParameter(""" & strSQLParam & """, " & GetadDataType(rsParameters!TYPE_NAME, lSize) & ", adParamReturnValue" & IIf(strSize = "", "", ", " & strSize) & ")"
1100              AppendCodeLine sb, PrevLine, "cmd.Parameters.Append prm" & strSQLParam
1110          Case Else
1120              Debug.Assert False
1130          End Select
1140          Select Case rsParameters!TYPE_NAME
              Case "decimal"
1150              AppendCodeLine sb, PrevLine, "prm" & strSQLParam & ".Precision = " & rsParameters!NUMERIC_PRECISION
1160              AppendCodeLine sb, PrevLine, "prm" & strSQLParam & ".NumericScale = " & rsParameters!NUMERIC_SCALE
1170          Case Else
                  ' Ignore
1180          End Select
1190          rsParameters.MoveNext
1200      Wend
1210      AppendCodeLine sb, PrevLine, "strExtraInfo = strExtraInfo & " & LINQ_SQL_GENERATOR & ".GetSQL(""" & dbConnection.Schema & "." & ProcedureName & """, cmd.Parameters)"
1220      AppendCodeLine sb, PrevLine, "SET cmd.ActiveConnection = m_Base.Connection"
1230      If IsFunction Then
1240          AppendCodeLine sb, PrevLine, "Dim ReturnRS as New ADODB.Recordset"
1250          AppendCodeLine sb, PrevLine, "ReturnRS.CursorLocation = adUseClient"
1260          AppendCodeLine sb, PrevLine, "ReturnRS.LockType = adLockOptimistic"
1270          AppendCodeLine sb, PrevLine, "ReturnRS.CursorType = adOpenStatic"
1280          AppendCodeLine sb, PrevLine, "ReturnRS.Open cmd"
1290      ElseIf fReturnsRecords Then
1300          AppendCodeLine sb, PrevLine, "Dim rs as ADODB.Recordset"
1310          AppendCodeLine sb, PrevLine, "Set rs = cmd.Execute(RecordsAffected)"
1320          AppendCodeLine sb, PrevLine, "Set ReturnRecordsets = " & LINQ_SHARED_MODULE & ".ConvertToInMemoryRecordsets(rs, """ & ProcedureName & """)"
1330          AppendCodeLine sb, PrevLine, "Set ReturnRS = ReturnRecordsets(1)"
1340      Else
1350          AppendCodeLine sb, PrevLine, "cmd.Execute RecordsAffected, , adExecuteNoRecords"
1360      End If
1370      If rsParameters.RecordCount <> 0 Then rsParameters.MoveFirst
1380      While Not rsParameters.EOF
1390          strVBParam = GetVBParameterName(rsParameters!PARAMETER_NAME)
1400          strSQLParam = GetSQLParameterName(rsParameters!PARAMETER_NAME)
1410          Select Case rsParameters!PARAMETER_TYPE
              Case adParamInput
                  ' Ignore
1420          Case adParamOutput, adParamInputOutput
1430              AppendCodeLine sb, PrevLine, strVBParam & " = prm" & strVBParam & ".Value"
1440          Case adParamReturnValue
1450              Debug.Assert rsParameters!PARAMETER_NAME = "@RETURN_VALUE"
1460              If IsFunction Then
1470                  If DataTypeSuffix = "" Then
1480                      AppendCodeLine sb, PrevLine, ProcedureName & " = prm" & strVBParam & ".Value"
1490                  Else
1500                      AppendCodeLine sb, PrevLine, "Set " & ProcedureName & DataTypeSuffix & " = " & GetVBNullableConversion(strReturnDataType) & "(prm" & strVBParam & ".Value)"
1510                  End If
1520              Else
1530                  If DataTypeSuffix = "" Then
1540                      AppendCodeLine sb, PrevLine, "ReturnValue = prm" & strVBParam & ".Value"
1550                  Else
1560                      AppendCodeLine sb, PrevLine, "If Not ReturnValue Is Nothing Then ReturnValue = prm" & strVBParam & ".Value"
1570                  End If
1580              End If
1590          Case Else
1600              Debug.Assert False
1610          End Select
1620          rsParameters.MoveNext
1630      Wend
1640      If Not IsFunction Then
1650          sb.AppendLine ""
1660          AppendCodeLine sb, PrevLine, ProcedureName & DataTypeSuffix & " = True"
1670      ElseIf fReturnsRecords Then
1680          sb.AppendLine ""
1690          AppendCodeLine sb, PrevLine, "Set " & ProcedureName & DataTypeSuffix & " = " & LINQ_SHARED_MODULE & ".ConvertToInMemoryRecordset(ReturnRS, """ & ProcedureName & """)"
1700      End If
1710      sb.AppendLine ""
1720      sb.AppendLine "PROC_EXIT:"
1730      AppendCodeLine sb, PrevLine, "Exit Function"
1740      sb.AppendLine ""
1750      sb.AppendLine "PROC_ERROR:"
1760      AppendCodeLine sb, PrevLine, "If m_Base.HandleError(""" & dbConnection.CodeClassName & """, """ & ProcedureName & DataTypeSuffix & """, Erl, Err.Number, Err.Description, strExtraInfo, ErrorOption) Then"
1770      AppendCodeLine sb, PrevLine, "    cmd.ActiveConnection = m_Base.Connection"
1780      AppendCodeLine sb, PrevLine, "    Resume"
1790      AppendCodeLine sb, PrevLine, "End If"
1800      AppendCodeLine sb, PrevLine, "Resume PROC_EXIT"
1810      AppendCodeLine sb, PrevLine, "Resume"
1820      sb.AppendLine "End Function"
1830      GetSProcText = sb.Text

PROC_EXIT:
1840      On Error Resume Next
1850      If Not conn Is Nothing Then
1860          conn.Close
1870          Set conn = Nothing
1880      End If
1890      Exit Function

PROC_ERROR:
1900      LogError "_LINQ", "GetSProcText", Erl, Err.Number, Err.Description, ProcedureName
1910      Resume PROC_EXIT
1920      Resume

End Function

Private Sub AppendCodeLine(sb As StringBuilder, ByRef PreviousLineNumber As Integer, CodeLine As String, Optional SkipLineNumber As Boolean = False)
10        On Error GoTo PROC_ERROR
          
20        If PreviousLineNumber < 0 Then
30            sb.Append Space(4)
40        ElseIf SkipLineNumber Then
50            sb.Append Space(10)
60        Else
70            PreviousLineNumber = PreviousLineNumber + 10
              Dim strLineNumber As String
80            strLineNumber = CStr(PreviousLineNumber)
90            sb.Append strLineNumber
100           sb.Append Space(10 - Len(strLineNumber))
110       End If
120       sb.AppendLine CodeLine

PROC_EXIT:
130       Exit Sub

PROC_ERROR:
140       LogError "_LINQ", "AppendCodeLine", Erl, Err.Number, Err.Description
150       Resume PROC_EXIT
160       Resume

End Sub