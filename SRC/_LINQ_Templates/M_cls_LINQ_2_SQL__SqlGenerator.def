Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'--------------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by the a tool.
'     Runtime Version:<TOOL_VERSION>
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'--------------------------------------------------------------------------------------
'          __    _____   ______       ___       _____ ____    __
'         / /   /  _/ | / / __ \     |__ \     / ___// __ \  / /
'        / /    / //  |/ / / / /     __/ /     \__ \/ / / / / /
'       / /____/ // /|  / /_/ /     / __/     ___/ / /_/ / / /___
' _____/_____/___/_/ |_/\___\_\____/____/____/____/\___\_\/_____/
'/_____/                     /_____/   /_____/
'
' (c) Tim Getsch - <SOURCE_URL>
' @author timgetsch@commitcs.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'--------------------------------------------------------------------------------------
Option Compare Database
Option Explicit

Public Function GetSQL(ProcedureName As String, Parameters As ADODB.Parameters) As String
10        On Error GoTo PROC_ERROR
          
          Dim sb As New cls_LINQ_2_SQL__StringBuilder
          Dim p As ADODB.Parameter
20        For Each p In Parameters
30            Select Case p.Direction
              Case adParamInputOutput, adParamOutput, adParamInput
40                sb.AppendLine "DECLARE @" & p.Name & " AS " & GetSQLDataType(p.Type, p.Size, p.Precision, p.NumericScale) & " = " & ConvertADOValueToSQLText(p.Value, p.Type)
50            Case adParamReturnValue
60                Debug.Assert p.Name = "RETURN_VALUE"
70                sb.AppendLine "DECLARE @" & p.Name & " AS " & GetSQLDataType(p.Type, p.Size, p.Precision, p.NumericScale)
80            Case Else
90                Err.Raise 1, , "Unexpected Parameters(""" & p.Name & """).Direction: " & p.Direction
100           End Select
110       Next p
120       sb.AppendLine ""
130       sb.AppendLine "EXEC @RETURN_VALUE = " & ProcedureName
          Dim strIndent As String
140       strIndent = Space$(8)
          Dim fLooped As Boolean
150       For Each p In Parameters
160           Select Case p.Direction
              Case adParamInput
170               sb.Append strIndent & IIf(fLooped, ", ", "  ")
180               sb.AppendLine "@" & p.Name & " = @" & p.Name
190               fLooped = True
200           Case adParamInputOutput, adParamOutput
210               sb.Append strIndent & IIf(fLooped, ", ", "  ")
220               sb.AppendLine "@" & p.Name & " = @" & p.Name & " OUT"
230               fLooped = True
240           Case adParamReturnValue
                  ' Ignore
250           Case Else
260               Err.Raise 1, , "Unexpected Parameters(""" & p.Name & """).Direction: " & p.Direction
270           End Select
280       Next p
290       sb.AppendLine ""
300       sb.AppendLine "SELECT @RETURN_VALUE AS RETURN_VALUE"
310       For Each p In Parameters
320           Select Case p.Direction
              Case adParamInput
                  ' Ignore
330           Case adParamInputOutput, adParamOutput
340               sb.Append strIndent & ", "
350               sb.AppendLine "@" & p.Name & " AS " & p.Name
360           Case adParamReturnValue
                  ' Ignore
370           Case Else
380               Err.Raise 1, , "Unexpected Parameters(""" & p.Name & """).Direction: " & p.Direction
390           End Select
400       Next p
410       GetSQL = sb.Text

PROC_EXIT:
420       Exit Function

PROC_ERROR:
430       LogError "cls_LINQ_2_SQL__SqlGenerator", "GetSQL", Erl, Err.Number, Err.Description
440       Resume PROC_EXIT
450       Resume
End Function

Private Function GetSQLDataType(DataType As ADODB.DataTypeEnum, Size As Long, Precision As Long, NumericScale As Long) As String
          Dim strDataType As String
10        On Error GoTo PROC_ERROR

20        Select Case DataType
          Case adBoolean
30            strDataType = "BIT"
40        Case adTinyInt, adUnsignedTinyInt
50            strDataType = "TINYINT"
60        Case adSmallInt
70            strDataType = "SMALLINT"
80        Case adInteger
90            strDataType = "INT"
100       Case adBigInt
110           strDataType = "BIGINT"
120       Case adCurrency
130           strDataType = "MONEY"
140       Case adDecimal
150           strDataType = "DECIMAL(" & Precision & ", " & NumericScale & ")"
160       Case adGUID
170           strDataType = "UNIQUEIDENTIFIER"
180       Case adDate
190           strDataType = "DATETIME"
200       Case adDBDate
210           strDataType = "DATE"
220       Case adDBTime
230           strDataType = "TIME"
240       Case adDBTimeStamp
250           strDataType = "DATETIME"
260       Case adSingle
270           strDataType = "REAL"
280       Case adDouble
290           strDataType = "FLOAT"
300       Case adChar
310           strDataType = "CHAR" & GetSize(Size)
320       Case adWChar
330           strDataType = "NCHAR" & GetSize(Size)
340       Case adVarChar
350           strDataType = "VARCHAR" & GetSize(Size)
360       Case adVarWChar
370           strDataType = "NVARCHAR" & GetSize(Size)
380       Case adLongVarChar
390           strDataType = "VARCHAR(MAX)"
400       Case adLongVarWChar
410           strDataType = "NVARCHAR(MAX)"
420       Case adBinary
430           strDataType = "BINARY" & GetSize(Size)
440       Case adVarBinary
450           strDataType = "VARBINARY" & GetSize(Size)
460       Case adEmpty
470           strDataType = "UNKNOWN_TYPE"
480       Case Else
490           Err.Raise 1, , "Unexpected DataType: " & DataType
500       End Select
510       GetSQLDataType = strDataType

PROC_EXIT:
520       Exit Function

PROC_ERROR:
530       LogError "cls_LINQ_2_SQL__SqlGenerator", "GetSQLDataType", Erl, Err.Number, Err.Description
540       Resume PROC_EXIT
550       Resume
End Function

Private Function GetSize(Size As Long) As String
10        On Error GoTo PROC_ERROR

20        Select Case Size
          Case Is > 0
30            GetSize = "(" & Size & ")"
40        Case Else
50            GetSize = "(MAX)"
80        End Select

PROC_EXIT:
90        Exit Function

PROC_ERROR:
100       LogError "cls_LINQ_2_SQL__SqlGenerator", "GetSize", Erl, Err.Number, Err.Description
110       Resume PROC_EXIT
120       Resume

End Function

Private Function ConvertADOValueToSQLText(Value As Variant, DataType As ADODB.DataTypeEnum) As String
          Dim strValue As String
10        On Error GoTo PROC_ERROR

20        If IsNull(Value) Then
30            strValue = "NULL"
40        Else
50            Select Case DataType
              Case adBoolean
60                strValue = IIf(Value, "1", "0")
70            Case adTinyInt, adSmallInt, adInteger, adBigInt, _
                      adCurrency, adDecimal, adSingle, adDouble, adUnsignedTinyInt
80                strValue = Value
90            Case adGUID
100               strValue = "'" & Mid(Value, 2, 36) & "'"
110           Case adDate, adDBDate, adDBTime, adDBTimeStamp
120               strValue = ConvertDateToSqlString(Value)
130           Case adChar, adWChar, adVarChar, adVarWChar, adLongVarChar, adLongVarWChar
140               strValue = QuoteString(CStr(Value))
150           Case adBinary, adVarBinary
                  Dim strBinary As String
160               strBinary = BinaryToHex(Value)
170               strValue = "Convert(binary(" & Len(strBinary) / 2 & "), " & BinaryToHex(Value) & ")"
180           Case Else
190               Err.Raise 1, , "Unexpteded DataType: " & DataType
200           End Select
210       End If
220       ConvertADOValueToSQLText = strValue

PROC_EXIT:
230       Exit Function

PROC_ERROR:
240       LogError "cls_LINQ_2_SQL__SqlGenerator", "ConvertADOValueToSQLText", Erl, Err.Number, Err.Description
250       Resume PROC_EXIT
260       Resume
End Function

Private Function QuoteString(Text As String, Optional SwapBlankWithNULL As Boolean = True) As String
10        On Error GoTo PROC_ERROR

20        If Text = "" And SwapBlankWithNULL Then
30            QuoteString = "NULL"
40        Else
50            QuoteString = "'" & Replace(Text, "'", "''") & "'"
60        End If

PROC_EXIT:
70        Exit Function

PROC_ERROR:
80        LogError "cls_LINQ_2_SQL__SqlGenerator", "QuoteString", Erl, Err.Number, Err.Description
90        Resume PROC_EXIT
100       Resume
End Function

Private Function BinaryToHex(arrBytes) As String
          Dim arrHex() As String
10        On Error GoTo PROC_ERROR

20        ReDim arrHex(UBound(arrBytes))
          Dim l As Long
30        For l = LBound(arrBytes) To UBound(arrBytes)
40            arrHex(l) = Hex$(arrBytes(l))
50            Select Case Len(arrHex(l))
                  Case 2
                      ' Good
60                Case 1
70                    arrHex(l) = "0" & arrHex(l)
80                Case Else
90                    Err.Raise 1, , "BinaryToHex Failed"
100           End Select
110       Next
120       BinaryToHex = "0x" & Join(arrHex, "")

PROC_EXIT:
130       Exit Function

PROC_ERROR:
140       LogError "cls_LINQ_2_SQL__SqlGenerator", "BinaryToHex", Erl, Err.Number, Err.Description
150       Resume PROC_EXIT
160       Resume

End Function

Private Function ConvertDateToSqlString(dt) As String
10        On Error GoTo PROC_ERROR

20        If IsNull(dt) Then
30            ConvertDateToSqlString = "NULL"
40        Else
              Dim dtRoundedToMinute As Date
50            dtRoundedToMinute = CDate(Format$(dt, "mm/dd/yyyy hh:mm AM/PM"))
              Dim sglSeconds As Single
              Const SECONDS_PER_DAY As Single = 24# * 60 * 60
60            sglSeconds = (dt - dtRoundedToMinute) * SECONDS_PER_DAY
              Dim strFormatSeconds As String
70            strFormatSeconds = Format$(sglSeconds, "00.000")
80            If Left$(strFormatSeconds, 1) = "-" Then
90                sglSeconds = sglSeconds + 60
100               dt = dt - 60 / SECONDS_PER_DAY
110               strFormatSeconds = Format$(sglSeconds, "00.000")
120           End If
130           ConvertDateToSqlString = "'" & Replace(Format$(dt, "MMM DD YYYY hh:mm:00.000 AM/PM"), "00.000", Format$(sglSeconds, "00.000")) & "'"
140       End If

PROC_EXIT:
150       Exit Function

PROC_ERROR:
160       LogError "cls_LINQ_2_SQL__SqlGenerator", "ConvertDateToSqlString", Erl, Err.Number, Err.Description
170       Resume PROC_EXIT
180       Resume
End Function
