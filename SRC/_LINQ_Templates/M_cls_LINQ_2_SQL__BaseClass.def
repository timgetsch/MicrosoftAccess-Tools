Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'--------------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by the a tool.
'     Runtime Version:<TOOL_VERSION>
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'--------------------------------------------------------------------------------------
'          __    _____   ______       ___       _____ ____    __
'         / /   /  _/ | / / __ \     |__ \     / ___// __ \  / /
'        / /    / //  |/ / / / /     __/ /     \__ \/ / / / / /
'       / /____/ // /|  / /_/ /     / __/     ___/ / /_/ / / /___
' _____/_____/___/_/ |_/\___\_\____/____/____/____/\___\_\/_____/
'/_____/                     /_____/   /_____/
'
' (c) Tim Getsch - <SOURCE_URL>
' @author timgetsch@commitcs.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'--------------------------------------------------------------------------------------
Option Compare Database
Option Explicit

Public Enum UNKNOWN_TYPE
    NO_VALUE = 0
End Enum

Public Enum enErrorOption
    eoIgnoreError = 0
    eoLogError = 1
    eoRaiseError = 2
    eoLogAndRaiseError = 3
End Enum

Const LOG_CASE_ELSE As Integer = -5
Const LOG_CASE_ELSE_DESC As String = "Unexpected Case Else Hit"

Const ERROR_CONNECTION_WAS_FORCIBLY_CLOSED As Long = -2147467259         ' [Microsoft]TCP Provider: An existing connection was forcibly closed by the remote host.
Const ERROR_CONTAINS_CONNECTION_WAS_FORCIBLY_CLOSED = "An existing connection was forcibly closed"
Const ERROR_CONTAINS_CONNECTION_ATTEMPT_FAILED = "A connection attempt failed"
Const ERROR_CONTAINS_COMMINICATION_LINK_FAILURE = "Communication link failure"
Const ERROR_OPERATION_REQUIRES_AN_OLE_DB_SESSION As Long = 3709          ' Requested operation requires an OLE DB Session object, which is not supported by the current provider.
Const ERROR_CONTAINS_OPERATION_REQUIRES_AN_OLE_DB_SESSION = "Requested operation requires an OLE DB Session object"
' WARNING -2147217900 is used for many different ODBC errors ' Const ERROR_DEADLOCK_VICTOM_RERUN_THE_TRANSACTION As Long = -2147217900  ' [Microsoft][SQL Server]Transaction (Process ID 173) was deadlocked on lock resources with another process and has been chosen as the deadlock victim. Rerun the transaction.
Const ERROR_ENDS_WITH_DEADLOCK_VICTOM_RERUN_THE_TRANSACTION As String = "deadlock victim. Rerun the transaction."
Const ERROR_QUERY_TIMEOUT_EXPIRED As Long = -2147217871                  ' [Microsoft][SQL Server Native Client 11.0]Query timeout expired
Const ERROR_ENDS_WITH_QUERY_TIMEOUT_EXPIRED As String = "Query timeout expired"

Private m_Conn As ADODB.Connection
Private m_ConnectionID As en_LINQ_2_SQL_Connection
Private m_ConnectionString As String
Private m_CodeClassName As String

Public Property Get Connection() As ADODB.Connection
10        On Error GoTo PROC_ERROR

20        Set Connection = m_Conn

PROC_EXIT:
30        Exit Property

PROC_ERROR:
40        LogError "cls_LINQ_2_SQL__BaseClass", "Connection", Erl, Err.Number, Err.Description
50        Resume PROC_EXIT
60        Resume
End Property

Public Sub Initialize(ConnectionID As en_LINQ_2_SQL_Connection, ProcedureName As String)
10        On Error GoTo PROC_ERROR
          
20        m_ConnectionID = ConnectionID
          Dim rs As ADODB.Recordset
30        Set rs = mod_LINQ_2_SQL_Shared.GetConnectionSettings(ConnectionID)
40        m_ConnectionString = mod_LINQ_2_SQL_Shared.GetSQLConnectString(rs!SqlServerDriver, rs!Server, rs!Database, rs!Trusted, rs!Description, Nz(rs!UserName), Nz(rs!Password), Nz(rs!Encrypt), Nz(rs!ConnectRetryCount, mod_LINQ_2_SQL_Shared.DefaultConnectRetryCount), mod_LINQ_2_SQL_Shared.App)
50        m_CodeClassName = Nz(rs!CodeClassName)
          
CONNECT_TO_DATABASE:
60        Set m_Conn = New ADODB.Connection
70        m_Conn.Open m_ConnectionString

PROC_EXIT:
80        If Not rs Is Nothing Then
90            rs.Close
100           Set rs = Nothing
110       End If
120       Exit Sub

PROC_ERROR:
130       Select Case Err.Number
          Case ERROR_CONNECTION_WAS_FORCIBLY_CLOSED, ERROR_OPERATION_REQUIRES_AN_OLE_DB_SESSION
140           CancelableSleep 3, "Waiting for connectivity: " & m_CodeClassName & "." & ProcedureName
150           Resume CONNECT_TO_DATABASE
160       Case Else
170           LogError "cls_LINQ_2_SQL__BaseClass", "Initialize", Erl, Err.Number, Err.Description
180           Resume PROC_EXIT
190           Resume
200       End Select
End Sub

Private Sub Class_Initialize()
10        On Error GoTo PROC_ERROR

20        m_CodeClassName = "cls_LINQ_2_SQL__BaseClass"

PROC_EXIT:
30        Exit Sub

PROC_ERROR:
40        LogError "cls_LINQ_2_SQL__BaseClass", "Class_Initialize", Erl, Err.Number, Err.Description
50        Resume PROC_EXIT
60        Resume
End Sub

Private Sub Class_Terminate()
10        On Error GoTo PROC_ERROR

20        If Not m_Conn Is Nothing Then
30            m_Conn.Close
40            Set m_Conn = Nothing
50        End If

PROC_EXIT:
60        Exit Sub

PROC_ERROR:
70        LogError "cls_LINQ_2_SQL__BaseClass", "Class_Terminate", Erl, Err.Number, Err.Description, , True
80        Resume PROC_EXIT
90        Resume
End Sub

Private Sub ReConnect(Optional SecondsToSleep As Integer = 3, Optional ProcedureName As String)
10        On Error GoTo PROC_ERROR
          
20        Class_Terminate
30        If SecondsToSleep <= 0 Then
40            Initialize m_ConnectionID, ProcedureName
50        ElseIf CancelableSleep(SecondsToSleep, "Reconnecting " & m_CodeClassName) Then
60            Initialize m_ConnectionID, ProcedureName
70        Else
80            Err.Raise 1, m_CodeClassName, "ReConnect Canceled"
90        End If
          
PROC_EXIT:
100       Exit Sub

PROC_ERROR:
110       Select Case Err.Number
          Case 1 ' ReConnect Canceled
120           Err.Raise Err.Number, Err.Source, Err.Description
130       Case Else
140           LogError "cls_LINQ_2_SQL__BaseClass", "ReConnect", Erl, Err.Number, Err.Description
150           Resume PROC_EXIT
160           Resume
170       End Select
End Sub

Public Function ExecuteCommand(ObjectName As String, _
          CommandText As String, _
          Optional CommandTimeout As Long = 30, _
          Optional ByRef ReturnRS As ADODB.Recordset, Optional ByRef ReturnValue As Long, Optional ByRef RecordsAffected As Long, Optional ErrorOption As enErrorOption = eoLogAndRaiseError _
          ) As Boolean
10        On Error GoTo PROC_ERROR

          Dim strExtraInfo As String
20        strExtraInfo = ObjectName
          
          Dim cmd As New ADODB.Command
30        cmd.CommandType = adCmdText
40        cmd.CommandTimeout = CommandTimeout
50        cmd.CommandText = CommandText
          Dim prmRETURN_VALUE As ADODB.Parameter
60        Set prmRETURN_VALUE = cmd.CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
70        strExtraInfo = strExtraInfo & CommandText
80        Set cmd.ActiveConnection = m_Conn
90        Set ReturnRS = cmd.Execute(RecordsAffected)
100       ReturnValue = prmRETURN_VALUE.Value

110       ExecuteCommand = True

PROC_EXIT:
120       Exit Function

PROC_ERROR:
130       If HandleError("cls_LINQ_2_SQL__BaseClass", "ExecuteCommand", Erl, Err.Number, Err.Description, strExtraInfo, ErrorOption) Then
140           cmd.ActiveConnection = m_Conn
150           Resume
160       End If
170       Resume PROC_EXIT
180       Resume
End Function

' Return True if we are supposed to retry
Public Function HandleError(ObjectName As String, ProcedureName As String, ErrorLine As Long, ErrNumber As Long, ErrDescription As String, ExtraInfo As String, ErrorOption As enErrorOption) As Boolean
          Dim strReconnectReason As String
          
          ' Do not catch errors that happen in here.  We want raise errors to bubble up.
10        If ErrDescription Like "*" & ERROR_ENDS_WITH_DEADLOCK_VICTOM_RERUN_THE_TRANSACTION Then
20            strReconnectReason = "Deadlock Victim"
30        Else
40            Select Case ErrNumber
              Case ERROR_OPERATION_REQUIRES_AN_OLE_DB_SESSION
50                If ErrDescription Like "*" & ERROR_CONTAINS_OPERATION_REQUIRES_AN_OLE_DB_SESSION & "*" Then
60                    strReconnectReason = ERROR_CONTAINS_OPERATION_REQUIRES_AN_OLE_DB_SESSION
70                End If
80            Case ERROR_CONNECTION_WAS_FORCIBLY_CLOSED
90                If ErrDescription Like "*" & ERROR_CONTAINS_CONNECTION_WAS_FORCIBLY_CLOSED & "*" Then
100                   strReconnectReason = ERROR_CONTAINS_CONNECTION_WAS_FORCIBLY_CLOSED
110               ElseIf ErrDescription Like "*" & ERROR_CONTAINS_COMMINICATION_LINK_FAILURE & "*" Then
120                   strReconnectReason = ERROR_CONTAINS_COMMINICATION_LINK_FAILURE
130               ElseIf ErrDescription Like "*" & ERROR_CONTAINS_CONNECTION_ATTEMPT_FAILED & "*" Then
140                   strReconnectReason = ERROR_CONTAINS_CONNECTION_ATTEMPT_FAILED
150               End If
160           Case Else
                  ' We will process this later
170           End Select
180       End If
          
190       If strReconnectReason <> "" Then
200           LogError ObjectName, ProcedureName, ErrorLine, ErrNumber, strReconnectReason, ExtraInfo, True, False
210           ReConnect 0, ProcedureName
220           HandleError = True
230           Exit Function
240       End If
          
250       Select Case ErrorOption
          Case eoLogAndRaiseError, eoLogError
260           ReConnect 0, ProcedureName
270           LogError ObjectName, ProcedureName, ErrorLine, ErrNumber, ErrDescription, ExtraInfo, True, ErrorOption = eoLogAndRaiseError
280       Case eoRaiseError
290           ReConnect 0, ProcedureName
300           Err.Raise ErrNumber, , ErrDescription
310       Case eoIgnoreError
              ' Make sure we create a new connection for timeouts
320           Select Case ErrNumber
              Case ERROR_QUERY_TIMEOUT_EXPIRED
330               If ErrDescription Like "*" & ERROR_ENDS_WITH_QUERY_TIMEOUT_EXPIRED Then
340                   ReConnect , ProcedureName
350               End If
360           Case Else
                  ' Ignore anything else
370           End Select
380       Case Else
390           LogError "cls_LINQ_2_SQL__BaseClass", "HandleError", Erl, LOG_CASE_ELSE, LOG_CASE_ELSE_DESC, ErrorOption, False, True
400       End Select
End Function