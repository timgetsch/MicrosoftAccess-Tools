Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'--------------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by the a tool.
'     Runtime Version:TOOL_VERSION
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'---------------------------------------------------------------------------------------
'          __    _____   ______       ___       _____ ____    __
'         / /   /  _/ | / / __ \     |__ \     / ___// __ \  / /
'        / /    / //  |/ / / / /     __/ /     \__ \/ / / / / /
'       / /____/ // /|  / /_/ /     / __/     ___/ / /_/ / / /___
' _____/_____/___/_/ |_/\___\_\____/____/____/____/\___\_\/_____/
'/_____/                     /_____/   /_____/
'
' (c) Tim Getsch
' @author timgetsch@commitcs.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'---------------------------------------------------------------------------------------
Option Compare Database
Option Explicit

Public Enum UNKNOWN_TYPE
    NO_VALUE = 0
End Enum

Public Enum enErrorOption
    eoIgnoreError = 0
    eoLogError = 1
    eoRaiseError = 2
    eoLogAndRaiseError = 3
End Enum

Const LOG_CASE_ELSE As Integer = -5
Const LOG_CASE_ELSE_DESC As String = "Unexpected Case Else Hit"

Const ERROR_CONNECTION_WAS_FORCIBLY_CLOSED As Long = -2147467259         ' [Microsoft]TCP Provider: An existing connection was forcibly closed by the remote host.
Const ERROR_CONTAINS_CONNECTION_WAS_FORCIBLY_CLOSED = "An existing connection was forcibly closed"
Const ERROR_OPERATION_REQUIRES_AN_OLE_DB_SESSION As Long = 3709          ' Requested operation requires an OLE DB Session object, which is not supported by the current provider.
Const ERROR_CONTAINS_OPERATION_REQUIRES_AN_OLE_DB_SESSION = "Requested operation requires an OLE DB Session object"
' WARNING -2147217900 is used for many different ODBC errors ' Const ERROR_DEADLOCK_VICTOM_RERUN_THE_TRANSACTION As Long = -2147217900  ' [Microsoft][SQL Server]Transaction (Process ID 173) was deadlocked on lock resources with another process and has been chosen as the deadlock victim. Rerun the transaction.
Const ERROR_ENDS_WITH_DEADLOCK_VICTOM_RERUN_THE_TRANSACTION As String = "deadlock victim. Rerun the transaction."
Const ERROR_QUERY_TIMEOUT_EXPIRED As Long = -2147217871                  ' [Microsoft][SQL Server Native Client 11.0]Query timeout expired
Const ERROR_ENDS_WITH_QUERY_TIMEOUT_EXPIRED As String = "Query timeout expired"

Private m_Conn As ADODB.Connection
Private m_ConnectionID As Integer
Private m_ConnectionString As String
Private m_CodeClassName As String

Private Const LINQ_REMOTE_CONNECTIONS As String = "USys_LinqRemoteConnections"

Private Function GetSQLConnectString(strSqlServerDriver As String, strServer As String, strDatabase As String, fTrustedConnection As Boolean, strDescription As String, UserID, Password) As String
10        On Error GoTo PROC_ERROR
          
20        If strServer = "" And strDatabase = "" Then
30            GetSQLConnectString = ";DATABASE=" & CurrentDb.Name
40        Else
50            GetSQLConnectString = "ODBC" & _
                          IIf(strDescription <> "", ";Description=" & strDescription, "") & _
                          ";DRIVER=" & strSqlServerDriver & _
                          ";SERVER=" & strServer & _
                          ";DATABASE=" & strDatabase & _
                          IIf(fTrustedConnection, ";Trusted_Connection=Yes", "") & _
                          IIf(Not fTrustedConnection, ";Uid=" & UserID, "") & _
                          IIf(Not fTrustedConnection, ";Pwd=" & Password, "") & _
                          ";APP=" & Left$(GetAppTitle(), 25)
60        End If
          
PROC_EXIT:
70        Exit Function
          
PROC_ERROR:
80        LogError "cls_LINQ_Base", "GetSQLConnectString", Erl, Err.Number, Err.Description
90        Resume PROC_EXIT
100       Resume
End Function

Private Function GetAppTitle() As String
10        On Error GoTo PROC_ERROR

20        On Error Resume Next
          Dim strAppTitle As String
30        strAppTitle = CurrentDb.Properties("AppTitle")
40        If Err.Number <> 0 Then
50            strAppTitle = CurrentProject.Name
60        End If
70        GetAppTitle = strAppTitle

PROC_EXIT:
80        Exit Function

PROC_ERROR:
90        LogError "cls_LINQ_Base", "GetAppTitle", Erl, Err.Number, Err.Description
100       Resume PROC_EXIT
110       Resume
End Function

Public Property Get Connection() As ADODB.Connection
10        On Error GoTo PROC_ERROR

20        Set Connection = m_Conn

PROC_EXIT:
30        Exit Property

PROC_ERROR:
40        LogError "cls_LINQ_Base", "Connection", Erl, Err.Number, Err.Description
50        Resume PROC_EXIT
60        Resume
End Property

Public Sub Initialize(ConnectionID As Integer, Optional ProcedureName As String)
10        On Error GoTo PROC_ERROR
          
20        m_ConnectionID = ConnectionID

          Dim db As DAO.Database
          Dim rs As DAO.Recordset
30        Set db = CurrentDb()
40        Set rs = db.OpenRecordset("SELECT * FROM [" & LINQ_REMOTE_CONNECTIONS & "] WHERE ID=" & m_ConnectionID)
50        If rs.RecordCount = 1 Then
60            m_ConnectionString = GetSQLConnectString(rs!SqlServerDriver, rs!Server, rs!Database, rs!Trusted, rs!Description, Nz(rs!UserName), Nz(rs!Password))
70            m_CodeClassName = Nz(rs!CodeClassName)
80        ElseIf ConnectionID <> 0 Then
90            Err.Raise 1, , "UNKNOWN DatabaseConnection"
100       End If
          
CONNECT_TO_DATABASE:
110       Set m_Conn = New ADODB.Connection
120       m_Conn.Open m_ConnectionString

PROC_EXIT:
130       rs.Close
140       Set rs = Nothing
150       Exit Sub

PROC_ERROR:
160       Select Case Err.Number
          Case ERROR_CONNECTION_WAS_FORCIBLY_CLOSED, ERROR_OPERATION_REQUIRES_AN_OLE_DB_SESSION
170           CancelableSleep 3, "Waiting for connectivity: " & m_CodeClassName & "." & ProcedureName
180           Resume CONNECT_TO_DATABASE
190       Case Else
200           LogError "cls_LINQ_Base", "Class_Initialize", Erl, Err.Number, Err.Description
210           Resume PROC_EXIT
220           Resume
230       End Select
End Sub


Private Sub Class_Initialize()
10        On Error GoTo PROC_ERROR

20        m_CodeClassName = "cls_LINQ_Base"

PROC_EXIT:
30        Exit Sub

PROC_ERROR:
40        LogError "cls_LINQ_Base", "Class_Initialize", Erl, Err.Number, Err.Description
50        Resume PROC_EXIT
60        Resume
End Sub

Private Sub Class_Terminate()
10        On Error GoTo PROC_ERROR

20        If Not m_Conn Is Nothing Then
30            m_Conn.Close
40            Set m_Conn = Nothing
50        End If

PROC_EXIT:
60        Exit Sub

PROC_ERROR:
70        LogError "cls_LINQ_Base", "Class_Terminate", Erl, Err.Number, Err.Description, , True
80        Resume PROC_EXIT
90        Resume
End Sub

Private Sub ReConnect(Optional SecondsToSleep As Integer = 3, Optional ProcedureName As String)
10        On Error GoTo PROC_ERROR
          
20        Class_Terminate
30        If SecondsToSleep <= 0 Then
40            Initialize m_ConnectionID, ProcedureName
50        ElseIf CancelableSleep(SecondsToSleep, "Reconnecting " & m_CodeClassName) Then
60            Initialize m_ConnectionID, ProcedureName
70        Else
80            Err.Raise 1, m_CodeClassName, "ReConnect Canceled"
90        End If
          
PROC_EXIT:
100       Exit Sub

PROC_ERROR:
110       Select Case Err.Number
          Case 1 ' ReConnect Canceled
120           Err.Raise Err.Number, Err.Source, Err.Description
130       Case Else
140           LogError "cls_LINQ_Base", "ReConnect", Erl, Err.Number, Err.Description
150           Resume PROC_EXIT
160           Resume
170       End Select
End Sub

Public Function ExecuteCommand(ObjectName As String, _
          CommandText As String, _
          Optional CommandTimeout As Long = 30, _
          Optional ByRef ReturnRS As ADODB.Recordset, Optional ByRef ReturnValue As Long, Optional ByRef RecordsAffected As Long, Optional ErrorOption As enErrorOption = eoLogAndRaiseError _
          ) As Boolean
10        On Error GoTo PROC_ERROR

          Dim strExtraInfo As String
20        strExtraInfo = ObjectName
          
          Dim cmd As New ADODB.Command
30        cmd.CommandType = adCmdText
40        cmd.CommandTimeout = CommandTimeout
50        cmd.CommandText = CommandText
          Dim prmRETURN_VALUE As ADODB.Parameter
60        Set prmRETURN_VALUE = cmd.CreateParameter("RETURN_VALUE", adInteger, adParamReturnValue)
70        strExtraInfo = strExtraInfo & CommandText
80        Set cmd.ActiveConnection = m_Conn
90        Set ReturnRS = cmd.Execute(RecordsAffected)
100       ReturnValue = prmRETURN_VALUE.Value

110       ExecuteCommand = True

PROC_EXIT:
120       Exit Function

PROC_ERROR:
130       If HandleError("cls_LINQ_Base", "ExecuteCommand", Erl, Err.Number, Err.Description, strExtraInfo, ErrorOption) Then
140           cmd.ActiveConnection = m_Conn
150           Resume
160       End If
170       Resume PROC_EXIT
180       Resume
End Function


' Return True if we are supposed to retry
Public Function HandleError(ObjectName As String, ProcedureName As String, ErrorLine As Long, ErrNumber As Long, ErrDescription As String, ExtraInfo As String, ErrorOption As enErrorOption) As Boolean
          Dim fReconnectAndTryAgain As Boolean
          
          ' Do not catch errors that happen in here.  We want raise errors to bubble up.
10        If ErrDescription Like "*" & ERROR_ENDS_WITH_DEADLOCK_VICTOM_RERUN_THE_TRANSACTION Then
20            LogError ObjectName, ProcedureName, ErrorLine, ErrNumber, "Deadlock Victim", ExtraInfo, True, False
30            fReconnectAndTryAgain = True
40        Else
50            Select Case ErrNumber
              Case ERROR_OPERATION_REQUIRES_AN_OLE_DB_SESSION
60                If ErrDescription Like "*" & ERROR_CONTAINS_OPERATION_REQUIRES_AN_OLE_DB_SESSION & "*" Then
70                    fReconnectAndTryAgain = True
80                End If
90            Case ERROR_CONNECTION_WAS_FORCIBLY_CLOSED
100               If ErrDescription Like "*" & ERROR_CONTAINS_CONNECTION_WAS_FORCIBLY_CLOSED & "*" Then
110                   fReconnectAndTryAgain = True
120               End If
130           Case Else
                  ' We will process this later
140           End Select
150       End If
          
160       If fReconnectAndTryAgain Then
170           ReConnect 0, ProcedureName
180           HandleError = True
190           Exit Function
200       End If
          
210       Select Case ErrorOption
          Case eoLogAndRaiseError, eoLogError
220           ReConnect 0, ProcedureName
230           LogError ObjectName, ProcedureName, ErrorLine, ErrNumber, ErrDescription, ExtraInfo, True, ErrorOption = eoLogAndRaiseError
240       Case eoRaiseError
250           ReConnect 0, ProcedureName
260           Err.Raise ErrNumber, , ErrDescription
270       Case eoIgnoreError
              ' Make sure we create a new connection for timeouts
280           Select Case ErrNumber
              Case ERROR_QUERY_TIMEOUT_EXPIRED
290               If ErrDescription Like "*" & ERROR_ENDS_WITH_QUERY_TIMEOUT_EXPIRED Then
300                   ReConnect , ProcedureName
310               End If
320           Case Else
                  ' Ignore anything else
330           End Select
340       Case Else
350           LogError "cls_LINQ_Base", "HandleError", Erl, LOG_CASE_ELSE, LOG_CASE_ELSE_DESC, ErrorOption, False, True
360       End Select
End Function

Public Function ConvertToInMemoryRecordsets(rsFrom As ADODB.Recordset, strRecordsetName As String) As Collection
          Dim col As New Collection
10        On Error GoTo PROC_ERROR

20        col.Add ConvertToInMemoryRecordset(rsFrom, strRecordsetName)
          Dim rsNext As ADODB.Recordset
30        Set rsNext = rsFrom.NextRecordset
40        While rsNext.Fields.Count > 0
50            col.Add ConvertToInMemoryRecordset(rsNext, strRecordsetName)
60            Set rsNext = rsNext.NextRecordset
70        Wend
80        Set ConvertToInMemoryRecordsets = col

PROC_EXIT:
90        Exit Function

PROC_ERROR:
100       LogError "cls_LINQ_Base", "ConvertToInMemoryRecordsets", Erl, Err.Number, Err.Description
110       Resume PROC_EXIT
120       Resume
End Function

Public Function ConvertToInMemoryRecordset(rsFrom As ADODB.Recordset, strRecordsetName As String) As ADODB.Recordset
10        On Error GoTo PROC_ERROR
          
          Dim strDebugInfo As String
          Dim rsTo As New ADODB.Recordset
          Dim f As ADODB.Field
20        For Each f In rsFrom.Fields
30            strDebugInfo = f.Name
40            rsTo.Fields.Append f.Name, f.Type, f.DefinedSize, f.Attributes
50        Next
          
60        rsTo.CursorType = adOpenKeyset
70        rsTo.CursorLocation = adUseClient
80        rsTo.LockType = adLockPessimistic
90        rsTo.Open
          
100       While Not rsFrom.EOF
110           rsTo.AddNew
120           For Each f In rsTo.Fields
130               f.Value = rsFrom.Fields(f.Name)
140           Next
150           rsTo.Update
160           rsFrom.MoveNext
170       Wend
180       If rsTo.RecordCount > 0 Then
190           rsTo.MoveFirst
200       End If
          
210       Set ConvertToInMemoryRecordset = rsTo

PROC_EXIT:
220       Exit Function

PROC_ERROR:
230       Select Case Err.Number
          Case 3367 ' Object is already in collection. Cannot append.
240           LogError "cls_LINQ_Base", "ConvertToInMemoryRecordset", Erl, Err.Number, Err.Description, strRecordsetName & " " & strDebugInfo
250           Resume Next ' Skip over duplicate columns
260       Case 3001 ' Arguments are of the wrong type, are out of acceptable range, or are in conflict with one another.
270           LogError "cls_LINQ_Base", "ConvertToInMemoryRecordset", Erl, Err.Number, Err.Description, strRecordsetName & " " & strDebugInfo
280           Resume Next ' Skip over columns that are missing names or are somehow not valid
290       Case Else
300           LogError "cls_LINQ_Base", "ConvertToInMemoryRecordset", Erl, Err.Number, Err.Description, strRecordsetName & " " & strDebugInfo
310           Resume PROC_EXIT
320           Resume
330       End Select
End Function
