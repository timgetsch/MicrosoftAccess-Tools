'--------------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by the a tool.
'     Runtime Version:<TOOL_VERSION>
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'--------------------------------------------------------------------------------------
'          __    _____   ______       ___       _____ ____    __
'         / /   /  _/ | / / __ \     |__ \     / ___// __ \  / /
'        / /    / //  |/ / / / /     __/ /     \__ \/ / / / / /
'       / /____/ // /|  / /_/ /     / __/     ___/ / /_/ / / /___
' _____/_____/___/_/ |_/\___\_\____/____/____/____/\___\_\/_____/
'/_____/                     /_____/   /_____/
'
' (c) Tim Getsch - <SOURCE_URL>
' @author timgetsch@commitcs.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'--------------------------------------------------------------------------------------
Option Compare Database
Option Explicit

Public Function CreateTableValuedParameter(Name As String, UserDefinedTableType As String, Value As ADODB.Recordset) As cls_LINQ_2_SQL__TableValuedParameter
10        On Error GoTo PROC_ERROR
          
          Dim tvp As New cls_LINQ_2_SQL__TableValuedParameter
30        tvp.Name = Name
40        tvp.UserDefinedTableType = UserDefinedTableType
20        Set tvp.Value = Value
50        Set CreateTableValuedParameter = tvp

PROC_EXIT:
60        Exit Function

PROC_ERROR:
70        LogError "mod_LINQ_2_SQL_Generator", "CreateTableValuedParameter", Erl, Err.Number, Err.Description
80        Resume PROC_EXIT
90        Resume
End Function

Public Function GetSQL(ProcedureName As String, Parameters As Object, Optional IsFunction As Boolean, Optional ReturnsRecords As Boolean) As String
10        On Error GoTo PROC_ERROR
          
          Dim sb As New cls_LINQ_2_SQL__StringBuilder
20        sb.AppendLine "SET NOCOUNT ON;"
          Dim p As Object
30        For Each p In Parameters
40            Select Case TypeName(p)
              Case "Parameter"
50                Select Case p.Direction
                  Case adParamInputOutput, adParamOutput, adParamInput
60                    sb.AppendLine "DECLARE @" & p.Name & " AS " & GetSQLDataType(p.Type, p.Size, p.Precision, p.NumericScale) & " = " & ConvertADOValueToSQLText(p.Value, p.Type)
70                Case adParamReturnValue
80                    Debug.Assert p.Name = "RETURN_VALUE"
90                    sb.AppendLine "DECLARE @" & p.Name & " AS " & GetSQLDataType(p.Type, p.Size, p.Precision, p.NumericScale)
100               Case Else
110                   Err.Raise 1, , "Unexpected Parameters(""" & p.Name & """).Direction: " & p.Direction
120               End Select
130           Case "cls_LINQ_2_SQL__TableValuedParameter"
                  Dim tvp As cls_LINQ_2_SQL__TableValuedParameter
140               Set tvp = p
150               sb.AppendLine "DECLARE @" & tvp.Name & " AS " & tvp.UserDefinedTableType & ";"
160               AppendInsertRecordsetSQL sb, "@" & tvp.Name, tvp.Value
170           Case Else
180               Err.Raise 2, , "Unexpected Parameter type: " & TypeName(p)
190           End Select
200       Next p
210       sb.AppendLine ""
220       sb.AppendLine "SET NOCOUNT OFF;"
230       If IsFunction And ReturnsRecords Then
240           sb.AppendLine "SELECT *"
250           sb.Append "FROM " & ProcedureName & "("
              
              Dim fNotFirst As Boolean
260           For Each p In Parameters
270               If fNotFirst Then
280                   sb.Append ", "
290               Else
300                   fNotFirst = True
310               End If
320               sb.Append "@" & p.Name
330           Next p
              
340           sb.AppendLine ");"
350       Else
360           sb.AppendLine "EXEC @RETURN_VALUE = " & ProcedureName
370       End If
380       If Not IsFunction Or Not ReturnsRecords Then
              Dim strIndent As String
390           strIndent = Space$(8)
              Dim fLooped As Boolean
400           For Each p In Parameters
410               Select Case p.Direction
                  Case adParamInput
420                   sb.Append strIndent & IIf(fLooped, ", ", "  ")
430                   sb.AppendLine "@" & p.Name & " = @" & p.Name
440                   fLooped = True
450               Case adParamInputOutput, adParamOutput
460                   sb.Append strIndent & IIf(fLooped, ", ", "  ")
470                   sb.AppendLine "@" & p.Name & " = @" & p.Name & " OUT"
480                   fLooped = True
490               Case adParamReturnValue
                      ' Ignore
500               Case Else
510                   Err.Raise 1, , "Unexpected Parameters(""" & p.Name & """).Direction: " & p.Direction
520               End Select
530           Next p
540           sb.AppendLine
          
550           sb.AppendLine "SELECT @RETURN_VALUE AS RETURN_VALUE"
560           For Each p In Parameters
570               Select Case p.Direction
                  Case adParamInput
                      ' Ignore
580               Case adParamInputOutput, adParamOutput
590                   sb.Append strIndent & ", "
600                   sb.AppendLine "@" & p.Name & " AS " & p.Name
610               Case adParamReturnValue
                      ' Ignore
620               Case Else
630                   Err.Raise 1, , "Unexpected Parameters(""" & p.Name & """).Direction: " & p.Direction
640               End Select
650           Next p
660       End If
          
670       GetSQL = sb.Text

PROC_EXIT:
680       Exit Function

PROC_ERROR:
690       LogError "mod_LINQ_2_SQL_Generator", "GetSQL", Erl, Err.Number, Err.Description
700       Resume PROC_EXIT
710       Resume
End Function

Private Sub AppendInsertRecordsetSQL(sb As cls_LINQ_2_SQL__StringBuilder, TableName As String, rs As ADODB.Recordset)
10        On Error GoTo PROC_ERROR

20        If rs.RecordCount = 0 Then Exit Sub
30        rs.MoveFirst
40        While Not rs.EOF
50            AppendInsertRecordSQL sb, TableName, rs.Fields
60            rs.MoveNext
70        Wend

PROC_EXIT:
80        Exit Sub

PROC_ERROR:
90        LogError "mod_LINQ_2_SQL_Generator", "AppendInsertRecordsetSQL", Erl, Err.Number, Err.Description
100       Resume PROC_EXIT
110       Resume
End Sub

Private Sub AppendInsertRecordSQL(sb As cls_LINQ_2_SQL__StringBuilder, TableName As String, Fields As ADODB.Fields)
10        On Error GoTo PROC_ERROR

20        sb.Append "INSERT INTO "
30        sb.Append TableName
40        sb.Append " ("
          Dim fFirst As Boolean
50        fFirst = True
          Dim f As ADODB.Field
60        For Each f In Fields
70            If fFirst Then
80                fFirst = False
90            Else
100               sb.Append ","
110           End If
120           sb.Append f.Name
130       Next
140       sb.Append ") VALUES ("
150       fFirst = True
160       For Each f In Fields
170           If fFirst Then
180               fFirst = False
190           Else
200               sb.Append ","
210           End If
220           sb.Append ConvertADOValueToSQLText(f.Value, f.Type)
230       Next
240       sb.Append ")"
250       sb.AppendLine ""
          
PROC_EXIT:
260       Exit Sub

PROC_ERROR:
270       LogError "mod_LINQ_2_SQL_Generator", "AppendInsertRecordSQL", Erl, Err.Number, Err.Description
280       Resume PROC_EXIT
290       Resume
End Sub


Private Function GetSQLDataType(DataType As ADODB.DataTypeEnum, Size As Long, Precision As Long, NumericScale As Long) As String
          Dim strDataType As String
10        On Error GoTo PROC_ERROR

20        Select Case DataType
          Case adBoolean
30            strDataType = "BIT"
40        Case adTinyInt, adUnsignedTinyInt
50            strDataType = "TINYINT"
60        Case adSmallInt
70            strDataType = "SMALLINT"
80        Case adInteger
90            strDataType = "INT"
100       Case adBigInt
110           strDataType = "BIGINT"
120       Case adCurrency
130           strDataType = "MONEY"
140       Case adDecimal
150           strDataType = "DECIMAL(" & Precision & ", " & NumericScale & ")"
160       Case adGUID
170           strDataType = "UNIQUEIDENTIFIER"
180       Case adDate
190           strDataType = "DATETIME"
200       Case adDBDate
210           strDataType = "DATE"
220       Case adDBTime
230           strDataType = "TIME"
240       Case adDBTimeStamp
250           strDataType = "DATETIME"
260       Case adSingle
270           strDataType = "REAL"
280       Case adDouble
290           strDataType = "FLOAT"
300       Case adChar
310           strDataType = "CHAR" & GetSize(Size)
320       Case adWChar
330           strDataType = "NCHAR" & GetSize(Size)
340       Case adVarChar
350           strDataType = "VARCHAR" & GetSize(Size)
360       Case adVarWChar
370           strDataType = "NVARCHAR" & GetSize(Size)
380       Case adLongVarChar
390           strDataType = "VARCHAR(MAX)"
400       Case adLongVarWChar
410           strDataType = "NVARCHAR(MAX)"
420       Case adBinary
430           strDataType = "BINARY" & GetSize(Size)
440       Case adVarBinary
450           strDataType = "VARBINARY" & GetSize(Size)
460       Case adEmpty
470           strDataType = "UNKNOWN_TYPE"
480       Case Else
490           Err.Raise 1, , "Unexpected DataType: " & DataType
500       End Select
510       GetSQLDataType = strDataType

PROC_EXIT:
520       Exit Function

PROC_ERROR:
530       LogError "mod_LINQ_2_SQL_Generator", "GetSQLDataType", Erl, Err.Number, Err.Description
540       Resume PROC_EXIT
550       Resume
End Function

Private Function GetSize(Size As Long) As String
10        On Error GoTo PROC_ERROR

20        Select Case Size
          Case Is > 0
30            GetSize = "(" & Size & ")"
40        Case Else
50            GetSize = "(MAX)"
80        End Select

PROC_EXIT:
90        Exit Function

PROC_ERROR:
100       LogError "mod_LINQ_2_SQL_Generator", "GetSize", Erl, Err.Number, Err.Description
110       Resume PROC_EXIT
120       Resume

End Function

Private Function ConvertADOValueToSQLText(Value As Variant, DataType As ADODB.DataTypeEnum) As String
          Dim strValue As String
10        On Error GoTo PROC_ERROR

20        If IsNull(Value) Then
30            strValue = "NULL"
40        Else
50            Select Case DataType
              Case adBoolean
60                strValue = IIf(Value, "1", "0")
70            Case adTinyInt, adSmallInt, adInteger, adBigInt, _
                      adCurrency, adDecimal, adSingle, adDouble, adUnsignedTinyInt
80                strValue = Value
90            Case adGUID
100               strValue = "'" & Mid(Value, 2, 36) & "'"
110           Case adDate, adDBDate, adDBTime, adDBTimeStamp
120               strValue = ConvertDateToSqlString(Value)
130           Case adChar, adWChar, adVarChar, adVarWChar, adLongVarChar, adLongVarWChar
140               strValue = QuoteString(CStr(Value))
150           Case adBinary, adVarBinary
                  Dim strBinary As String
160               strBinary = BinaryToHex(Value)
170               strValue = "Convert(binary(" & Len(strBinary) / 2 & "), " & BinaryToHex(Value) & ")"
180           Case Else
190               Err.Raise 1, , "Unexpteded DataType: " & DataType
200           End Select
210       End If
220       ConvertADOValueToSQLText = strValue

PROC_EXIT:
230       Exit Function

PROC_ERROR:
240       LogError "mod_LINQ_2_SQL_Generator", "ConvertADOValueToSQLText", Erl, Err.Number, Err.Description
250       Resume PROC_EXIT
260       Resume
End Function

Private Function QuoteString(Text As String, Optional SwapBlankWithNULL As Boolean = True) As String
10        On Error GoTo PROC_ERROR

20        If Text = "" And SwapBlankWithNULL Then
30            QuoteString = "NULL"
40        Else
50            QuoteString = "'" & Replace(Text, "'", "''") & "'"
60        End If

PROC_EXIT:
70        Exit Function

PROC_ERROR:
80        LogError "mod_LINQ_2_SQL_Generator", "QuoteString", Erl, Err.Number, Err.Description
90        Resume PROC_EXIT
100       Resume
End Function

Private Function BinaryToHex(arrBytes) As String
          Dim arrHex() As String
10        On Error GoTo PROC_ERROR

20        ReDim arrHex(UBound(arrBytes))
          Dim l As Long
30        For l = LBound(arrBytes) To UBound(arrBytes)
40            arrHex(l) = Hex$(arrBytes(l))
50            Select Case Len(arrHex(l))
                  Case 2
                      ' Good
60                Case 1
70                    arrHex(l) = "0" & arrHex(l)
80                Case Else
90                    Err.Raise 1, , "BinaryToHex Failed"
100           End Select
110       Next
120       BinaryToHex = "0x" & Join(arrHex, "")

PROC_EXIT:
130       Exit Function

PROC_ERROR:
140       LogError "mod_LINQ_2_SQL_Generator", "BinaryToHex", Erl, Err.Number, Err.Description
150       Resume PROC_EXIT
160       Resume

End Function

Private Function ConvertDateToSqlString(dt) As String
10        On Error GoTo PROC_ERROR

20        If IsNull(dt) Then
30            ConvertDateToSqlString = "NULL"
40        Else
              Const SECONDS_PER_MINUTE As Integer = 60
              Const MINUTES_PER_HOUR As Integer = 60
              Const HOURS_PER_DAY As Integer = 24
              Const MINUTES_PER_DAY As Long = HOURS_PER_DAY * MINUTES_PER_HOUR
              Const SECONDS_PER_DAY As Long = MINUTES_PER_DAY * SECONDS_PER_MINUTE
              Const DAYS_PER_MINUTE As Double = 1 / MINUTES_PER_DAY
              
              Dim dtRoundedToMinute As Date
              Dim sglSecondsRoundedToMilliseconds As Single
              Dim strSeconds As String
              
50            dtRoundedToMinute = Int(dt * MINUTES_PER_DAY) * DAYS_PER_MINUTE ' This will truncate the seconds portion
60            sglSecondsRoundedToMilliseconds = Round((dt - dtRoundedToMinute) * SECONDS_PER_DAY, 3)
              
70            Select Case sglSecondsRoundedToMilliseconds
              Case Is < 0
80                Err.Raise 2, "modSQLHelper", "Unexpected Seconds: " & sglSecondsRoundedToMilliseconds
90            Case Is > 60
100               Err.Raise 1, "modSQLHelper", "Unexpected Seconds: " & sglSecondsRoundedToMilliseconds
110           Case 0
                  ' Ignore the seconds
120           Case SECONDS_PER_MINUTE
                  ' Add a minute and ignore the seconds
130               dtRoundedToMinute = dtRoundedToMinute + DAYS_PER_MINUTE
140           Case Is >= 10
150               strSeconds = ":" & sglSecondsRoundedToMilliseconds
160           Case Is < 10
170               strSeconds = ":0" & sglSecondsRoundedToMilliseconds
180           Case Else
190               Err.Raise 2, "modSQLHelper", "Unexpected Seconds: " & sglSecondsRoundedToMilliseconds
200           End Select
              
210           ConvertDateToSqlString = Format$(dtRoundedToMinute, "'YYYY-MM-DD hh:mm") & strSeconds & "'"
               
220       End If

PROC_EXIT:
230       Exit Function

PROC_ERROR:
240       LogError "mod_LINQ_2_SQL_Generator", "ConvertDateToSqlString", Erl, Err.Number, Err.Description, dt & " " & sglSecondsRoundedToMilliseconds
250       Resume PROC_EXIT
260       Resume
End Function