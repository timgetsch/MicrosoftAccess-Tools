'--------------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by the a tool.
'     Runtime Version:<TOOL_VERSION>
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'--------------------------------------------------------------------------------------
'          __    _____   ______       ___       _____ ____    __
'         / /   /  _/ | / / __ \     |__ \     / ___// __ \  / /
'        / /    / //  |/ / / / /     __/ /     \__ \/ / / / / /
'       / /____/ // /|  / /_/ /     / __/     ___/ / /_/ / / /___
' _____/_____/___/_/ |_/\___\_\____/____/____/____/\___\_\/_____/
'/_____/                     /_____/   /_____/
'
' (c) Tim Getsch - <SOURCE_URL>
' @author timgetsch@commitcs.com
' @license MIT (http://www.opensource.org/licenses/mit-license.php)
'--------------------------------------------------------------------------------------
Option Compare Database
Option Explicit

Public Const DefaultConnectRetryCount As Byte = 1
Public Const LINQ_REMOTE_CONNECTIONS As String = "USys_LinqRemoteConnections"

Public Property Get CurrentVBProject() As VBProject
10        On Error GoTo PROC_ERROR
          Static vbpCurrent As VBProject
20        If vbpCurrent Is Nothing Then
              Dim p As VBProject
30            For Each p In Application.VBE.VBProjects
40                If p.FileName = CurrentDb.Name Then
50                    Set vbpCurrent = p
60                    Exit For
70                End If
80            Next
90        End If
100       Set CurrentVBProject = vbpCurrent

PROC_EXIT:
110       Exit Property

PROC_ERROR:
120       LogError "mod_LINQ_2_SQL_Shared", "CurrentVBProject", Erl, Err.Number, Err.Description, , True, True
130       Resume PROC_EXIT
140       Resume
End Property

Public Property Get App() As String
          Static strApp As String
10        On Error GoTo PROC_ERROR

20        If strApp = "" Then strApp = GetApp()
30        App = strApp

PROC_EXIT:
40        Exit Property

PROC_ERROR:
50        LogError "mod_LINQ_2_SQL_Shared", "App", Erl, Err.Number, Err.Description, , True, True
60        Resume PROC_EXIT
70        Resume
End Property

Private Function GetApp() As String
10        On Error GoTo PROC_ERROR

          Dim strAppTitle As String
20        strAppTitle = CurrentVBProject.Description
30        If strAppTitle = "" Then
40            strAppTitle = CurrentVBProject.Name
50        End If
60        GetApp = strAppTitle

PROC_EXIT:
70        Exit Function

PROC_ERROR:
80        LogError "mod_LINQ_2_SQL_Shared", "GetApp", Erl, Err.Number, Err.Description, , True, True
90        Resume PROC_EXIT
100       Resume
End Function

Public Function GetSQLConnectString(Driver As String, Server As String, Database As String, _
            TrustedConnection As Boolean, Description As String, _
            Optional UserID As String = "", Optional Password As String = "", _
            Optional Encrypt As String = "", Optional ConnectRetryCount As Byte = DefaultConnectRetryCount, _
            Optional App As String = "") As String
10        On Error GoTo PROC_ERROR
          
20        If Server = "" And Database = "" Then
30            GetSQLConnectString = ";DATABASE=" & CurrentDb.Name
40        Else
              Dim sb As New cls_LINQ_2_SQL__StringBuilder
50            sb.Append "ODBC"
60            If Description <> "" Then sb.Append(";Description=").Append Description
70            sb.Append(";DRIVER=").Append Driver
80            sb.Append(";SERVER=").Append Server
90            sb.Append(";DATABASE=").Append Database
100           If TrustedConnection Then sb.Append "Trusted_Connection=Yes"
110           If Not TrustedConnection Then sb.Append(";Uid=").Append UserID
120           If Not TrustedConnection Then sb.Append(";Pwd=").Append Password
130           If Encrypt <> "" Then sb.Append(";Encrypt=").Append Encrypt
140           If ConnectRetryCount <> DefaultConnectRetryCount Then sb.Append(";ConnectRetryCount=").Append CStr(ConnectRetryCount)
150           If App <> "" Then sb.Append(";APP=").Append App
160           GetSQLConnectString = sb.Text
170       End If
          
PROC_EXIT:
180       Exit Function
          
PROC_ERROR:
190       LogError "mod_LINQ_2_SQL_Shared", "GetSQLConnectString", Erl, Err.Number, Err.Description, Database, True, True
200       Resume PROC_EXIT
210       Resume
End Function

Public Function GetConnectionSettings(ConnectionID As en_LINQ_2_SQL_Connection) As ADODB.Recordset
10        On Error GoTo PROC_ERROR

          Dim rsNew As New ADODB.Recordset
20        rsNew.Open "SELECT * FROM [" & LINQ_REMOTE_CONNECTIONS & "] WHERE ID=" & ConnectionID, CurrentProject.Connection, adOpenStatic, adLockReadOnly
          Dim rs As ADODB.Recordset
30        Set rs = ConvertToInMemoryRecordset(rsNew, LINQ_REMOTE_CONNECTIONS)
40        rsNew.Close
50        Set rsNew = Nothing
60        If rs.RecordCount = 1 Then
70            Set GetConnectionSettings = rs
80        Else
90            Err.Raise 1, , "UNKNOWN DatabaseConnection"
100       End If

PROC_EXIT:
110       Exit Function

PROC_ERROR:
120       LogError "mod_LINQ_2_SQL_Shared", "GetConnectionSettings", Erl, Err.Number, Err.Description, ConnectionID, True, True
130       Resume PROC_EXIT
140       Resume
End Function

Public Function ConvertToInMemoryRecordsets(rsFrom As ADODB.Recordset, strRecordsetName As String) As Collection
          Dim col As New Collection
10        On Error GoTo PROC_ERROR

20        col.Add ConvertToInMemoryRecordset(rsFrom, strRecordsetName)
          Dim rsNext As ADODB.Recordset
30        Set rsNext = rsFrom.NextRecordset
40        While rsNext.Fields.Count > 0
50            col.Add ConvertToInMemoryRecordset(rsNext, strRecordsetName)
60            Set rsNext = rsNext.NextRecordset
70        Wend
80        Set ConvertToInMemoryRecordsets = col

PROC_EXIT:
90        Exit Function

PROC_ERROR:
100       LogError "mod_LINQ_2_SQL_Shared", "ConvertToInMemoryRecordsets", Erl, Err.Number, Err.Description, strRecordsetName, True, True
110       Resume PROC_EXIT
120       Resume
End Function

Public Function ConvertToInMemoryRecordset(rsFrom As ADODB.Recordset, strRecordsetName As String) As ADODB.Recordset
10        On Error GoTo PROC_ERROR
          
          Dim strDebugInfo As String
          Dim rsTo As New ADODB.Recordset
          Dim fld As ADODB.Field
20        For Each fld In rsFrom.Fields
30            strDebugInfo = fld.Name
              
              Dim FieldType As ADODB.DataTypeEnum
40            Select Case fld.Type
              Case adDBTimeStamp
50                FieldType = adDate ' Use adDate instead of adDBTimeStamp to preserve the milliseconds
60            Case Else
70                FieldType = fld.Type
80            End Select
90            rsTo.Fields.Append fld.Name, FieldType, fld.DefinedSize, fld.Attributes
              
              Dim fNew As ADODB.Field
100           Set fNew = rsTo.Fields(fld.Name)
110           fNew.NumericScale = fld.NumericScale
120           fNew.Precision = fld.Precision
130           fNew.Attributes = fld.Attributes
140           Debug.Assert rsTo.Fields(fld.Name).Attributes = fld.Attributes
150       Next
          
160       rsTo.CursorType = adOpenKeyset
170       rsTo.CursorLocation = adUseClient
180       rsTo.LockType = adLockPessimistic
190       rsTo.Open
          
200       While Not rsFrom.EOF
210           rsTo.AddNew
220           For Each fld In rsTo.Fields
230               fld.Value = rsFrom.Fields(fld.Name)
240           Next
250           rsTo.Update
260           rsFrom.MoveNext
270       Wend
280       If rsTo.RecordCount > 0 Then
290           rsTo.MoveFirst
300       End If
          
310       Set ConvertToInMemoryRecordset = rsTo

PROC_EXIT:
320       Exit Function

PROC_ERROR:
      '    Select Case Err.Number
      '    Case 3367 ' Object is already in collection. Cannot append.
      '        LogError "mod_LINQ_2_SQL_Shared", "ConvertToInMemoryRecordset", Erl, Err.Number, Err.Description, strRecordsetName & " " & strDebugInfo, True
      '        Resume Next ' Skip over duplicate columns
      '    Case 3001 ' Arguments are of the wrong type, are out of acceptable range, or are in conflict with one another.
      '        LogError "mod_LINQ_2_SQL_Shared", "ConvertToInMemoryRecordset", Erl, Err.Number, Err.Description, strRecordsetName & " " & strDebugInfo, True
      '        Resume Next ' Skip over columns that are missing names or are somehow not valid
      '    Case Else
330           LogError "mod_LINQ_2_SQL_Shared", "ConvertToInMemoryRecordset", Erl, Err.Number, Err.Description, strRecordsetName & " " & strDebugInfo, True, True
340           Resume PROC_EXIT
350           Resume
      '    End Select
End Function

Public Function GetSQL(ProcedureName As String, Parameters As ADODB.Parameters) As String
10        On Error GoTo PROC_ERROR

20        GetSQL = mod_LINQ_2_SQL_Generator.GetSQL(ProcedureName, Parameters)

PROC_EXIT:
30        Exit Function

PROC_ERROR:
40        LogError "mod_LINQ_2_SQL_Shared", "GetSQL", Erl, Err.Number, Err.Description, ProcedureName, True, True
50        Resume PROC_EXIT
60        Resume
End Function